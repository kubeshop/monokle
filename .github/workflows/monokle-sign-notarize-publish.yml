name: monokle-sign-notarize-publish

on:
  release:
    types:
      - prereleased

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  # This workflow contains a single job called "build"
  build-and-publish-mac:
    runs-on: macOS-latest

    steps:
      - name: Context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it.
      - name: Checkout Project
        uses: actions/checkout@v2

      # Check memory and cpu
      - name: Verify Runner Resources
        run: |
          sysctl -n machdep.cpu.brand_string
          vm_stat | perl -ne '/page size of (\d+)/ and $size=$1; /Pages\s+([^:]+)[^\d]+(\d+)/ and printf("%-16s % 16.2f Mi\n", "$1:", $2 * $size / 1048576);'

      - name: Add MacOS certs
        run: |
          ls -la
          chmod +x .github/workflows/scripts/add-osx-cert.sh && .github/workflows/scripts/add-osx-cert.sh
        env:
          CERTIFICATE_OSX_APPLICATION: ${{ secrets.MONOKLE_MACOS_CERTS }}
          CERTIFICATE_PASSWORD: ${{ secrets.MONOKLE_MACOS_CERTS_PASSWORD }}

      - name: Electron mac os security identities
        run: security find-identity -v

      - name: Get Node Version
        run: |
          cat .nvmrc
          echo "::set-output name=nodeversion::$(cat .nvmrc)"
        id: get-node-version

      - name: Use Node.js ${{ steps.get-node-version.outputs.nodeversion }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ steps.get-node-version.outputs.nodeversion }}
          cache: 'npm'

      - name: Install Dependencies
        run: |
          env
          echo "npm: $(npm --version)"
          echo "node: $(node --version)"
          npm install

      - name: Verify Dependencies
        run: |
          ls -la
          npm list --depth=1

      - name: Build
        run: |
          npm run electron:build:ci
        env:
          # Set CI flag to false, or the build fails on all warnings, not just errors as locally.
          CI: false

      - name: Package and Publish
        run: |
          npm exec -c "electron-builder --publish \"always\""
        env:
          GITHUB_TOKEN: ${{ secrets.github_token }}
          EP_PRE_RELEASE: true
          NOTARIZE: true
          CSC_LINK: ${{ secrets.MONOKLE_MACOS_CERTS }}
          CSC_KEY_PASSWORD: ${{ secrets.MONOKLE_MACOS_CERTS_PASSWORD }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}

      # Check Binary Size
      - name: Build Succeeded
        run: |
          ls -alh dist | grep Monokle && du -sh dist/mac || true
        if: ${{ success() }}

      - name: Archive Binary
        uses: actions/upload-artifact@v2
        with:
          name: dist-mac
          path: dist
        if: ${{ success() }}

      - name: Build Failed - Output Build Logs
        run: |
          cat /Users/runner/.npm/_logs/*-debug.log || true
        if: ${{ failure() || cancelled() }}

      - name: Build Failed - Archive Build Logs
        uses: actions/upload-artifact@v2
        with:
          name: logs
          path: /Users/runner/.npm/_logs
        if: ${{ failure() || cancelled() }}

      # Make sure no secrets or certs are left on the runner
      - name: Cleanup files after run
        run: |
          rm -rf *
          ls -la
        if: ${{ always() }}

  build-and-publish-windows:
    runs-on: windows-latest

    steps:
      - name: Context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it.
      - name: Checkout Project
        uses: actions/checkout@v2

      - name: Get Node Version
        run: |
          Set-PSDebug -Trace 1
          $filePath = "D:\a\monokle\monokle\.nvmrc"
          Get-Content $filePath -Raw
          $content = Get-Content $filePath -Raw
          echo "::set-output name=nodeversion::$content"
        id: get-node-version

      - name: Use Node.js ${{ steps.get-node-version.outputs.nodeversion }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ steps.get-node-version.outputs.nodeversion }}
          cache: 'npm'

      - name: Get MSFT Cert
        id: write_file
        uses: timheuer/base64-to-file@v1
        with:
          fileName: 'kubeshop_msft.p12'
          encodedString: ${{ secrets.CERT_MSFT_KUBESHOP_P12_B64 }}

      # Install Dependencies
      - name: Install Dependencies
        run: |
          Set-PSDebug -Trace 1
          node --version
          npm --version
          npm install

      - name: Verify Dependencies
        run: |
          cmd /r dir
          npm list --depth=1

      - name: Build
        run: |
          npm run electron:build:ci
        env:
          # Set CI flag to false, or the build fails on all warnings, not just errors as locally.
          CI: false

      - name: Package and Publish
        run: |
          npm exec -c 'electron-builder --publish "always"'
        env:
          GITHUB_TOKEN: ${{ secrets.github_token }}
          WIN_CSC_LINK: ${{ steps.write_file.outputs.filePath }}
          WIN_CSC_KEY_PASSWORD: ${{ secrets.CERT_MSFT_KUBESHOP_P12_PASSWORD }}
          EP_PRE_RELEASE: true

      # Check Binary Size
      - name: Build Succeeded
        run: |
          cmd /r dir .\dist
        if: ${{ success() }}

      - name: Archive Binary
        uses: actions/upload-artifact@v2
        with:
          name: dist-win
          path: dist
        if: ${{ success() }}

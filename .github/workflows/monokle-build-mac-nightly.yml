name: monokle-build-mac-nightly

on:
  push:
    branches: [steen/housekeeping/build-binaries-windows]
  schedule:
    # * is a special character in YAML so you have to quote this string
    - cron: '0 2 * * *'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  # This workflow contains a single job called "build"
  build-mac:
    runs-on: macOS-latest

    steps:
      # Make sure build is clean and no files from a previous run are re-used.
      - name: Cleanup files before run
        run: |
          rm -rf *
          rm /Users/runner/.npm/_logs/*.log || true
        if: ${{ always() }}

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it.
      - name: Checkout Project
        uses: actions/checkout@v2

      # Check memory and cpu
      - name: Verify Runner Resources
        run: |
          sysctl -n machdep.cpu.brand_string
          vm_stat | perl -ne '/page size of (\d+)/ and $size=$1; /Pages\s+([^:]+)[^\d]+(\d+)/ and printf("%-16s % 16.2f Mi\n", "$1:", $2 * $size / 1048576);'

      - name: Install Tools
        run: |
          brew install tree jq

      - name: Get Node Version
        run: |
          cat .nvmrc
          echo "::set-output name=nodeversion::$(cat .nvmrc)"
        id: get-node-version

      - name: Use Node.js ${{ steps.get-node-version.outputs.nodeversion }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ steps.get-node-version.outputs.nodeversion }}
          cache: 'npm'

      - name: Install Dependencies
        run: |
          env
          echo "npm: $(npm --version)"
          echo "node: $(node --version)"
          npm install --force

      - name: Verify Dependencies
        run: |
          ls -la
          tree node_modules -L 1

      - name: Generate and apply tag
        run: |
          npm --no-git-tag-version --preid="$(date +%Y%m%d)" version prerelease
          npm version
          t=$(jq -r '.version' package.json)
          git tag "${t}" || true
          git push origin "${t}" || true
        env:
          GITHUB_TOKEN: ${{ secrets.github_token }}

      - name: Build
        run: |
          npm run electron:build:ci
        env:
          # Set CI flag to false, or the build fails on all warnings, not just errors as locally.
          CI: false

      - name: Package and Publish
        run: |
          npm exec -c "electron-builder --publish \"always\""
        env:
          GITHUB_TOKEN: ${{ secrets.github_token }}

      # Check Binary Size
      - name: Build Succeeded
        run: |
          ls -alh dist | grep Monokle && du -sh dist/mac || true
        if: ${{ success() }}

      - name: Archive Binary
        uses: actions/upload-artifact@v2
        with:
          name: dist
          path: dist
        if: ${{ success() }}

      - name: Build Failed - Output Build Logs
        run: |
          cat /Users/runner/.npm/_logs/*-debug.log || true
        if: ${{ failure() || cancelled() }}

      - name: Build Failed - Archive Build Logs
        uses: actions/upload-artifact@v2
        with:
          name: logs
          path: /Users/runner/.npm/_logs
        if: ${{ failure() || cancelled() }}

      # Make sure no secrets or certs are left on the runner
      - name: Cleanup files after run
        run: |
          rm -rf *
          ls -la
        if: ${{ always() }}

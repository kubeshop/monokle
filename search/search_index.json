{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Monokle Desktop","text":"<p>Welcome to Monokle Desktop - K8s configuration analysis and version control editor!</p> <p>Monokle Desktop helps you to:</p> <ul> <li>\u26a1 Quickly get a high-level view of your manifests, their contained resources and relationships</li> <li>\ud83d\udcc7 Leverage Git to manage the lifecycle of your configuration</li> <li>\u2705 Validate resources using OPA policy rules</li> <li>\ud83d\udd8a\ufe0f Easily edit resources without having to learn or look up yaml syntax and see the changes applied</li> <li>\ud83d\udd28 Refactor resources with maintained integrity of names and references</li> <li>\ud83d\udcf7 Preview and debug resources generated with kustomize or helm</li> <li>\u2795 Visualize extended resources defined in CRD</li> <li>\ud83e\udd1d Compare resource versions against your cluster and apply changes immediately or through pull requests</li> <li>\ud83d\udcda Create multi-step forms using Monokle's templating system to quickly generate manifests</li> <li>\ud83d\udca1 And much more!</li> </ul> <p>For further details on working with Monokle Desktop, read the Feature Overview document or watch the YouTube Monokle Desktop Walkthrough Video.</p>"},{"location":"#blog-posts","title":"Blog Posts","text":"<p>Check out the following blog posts with Monokle Desktop-related content:</p> <ul> <li>1.13 - Release blog post - December 7, 2022</li> <li>Introducing Monokle Cloud - October 24, 2022</li> <li>1.12 - Release blog post - October 24, 2022</li> <li>1.11 - Release blog post - September 30, 2022</li> <li>1.10 - Release blog post - August 10, 2022</li> <li>1.9 - Release blog post - July 12, 2022</li> <li>1.8 - Release blog post - June 6, 2022</li> <li>1.7 - Release blog post - May 2, 2022</li> <li>1.6 - Release blog post - Mar 21, 2022</li> <li>1.5 - Release blog post - Feb 7, 2022</li> <li>1.4 - Release blog post - Dec 15, 2021</li> <li>1.3 - Release blog post - Nov 15, 2021</li> <li>1.2 - Release blog post - Oct 4, 2021</li> <li>1.1 - Release blog post - Sep 6, 2021</li> <li>1.0 - Initial release blog post - Aug 10, 2021</li> </ul>"},{"location":"apply-and-diff/","title":"Deploying and Diffing Resources","text":"<p>When a resource is selected in the navigator, the Editor contains Deploy and Diff buttons in the top right.</p> <p></p> <ul> <li>Selecting Deploy will deploy the selected resource to the currently configured Cluster. A status message will be   shown in the top right after deploying.</li> <li>Selecting Diff will diff the selected resource against the currently configured cluster;<ul> <li>If the resource does not exist in the cluster, an error will be shown.</li> <li>If the resource does exist, the Diff dialog will be shown.</li> </ul> </li> </ul> <p></p> <p>In this screenshot</p> <ul> <li>The left side shows the resource in Monokle Desktop.</li> <li>The right side shows the resource retrieved from the cluster.</li> <li>Differences are highlighted as shown.</li> </ul> <p>Refreshing the diff is done with the Refresh button and deploying your local version of the resource to your cluster is done with Deploy.</p>"},{"location":"apply-and-diff/#editing-a-resource-in-cluster-mode","title":"Editing a Resource in Cluster Mode","text":"<p>Monokle Desktop allows you to edit any resource viewed in Cluster Mode and use the Deploy button to apply those changes back to the cluster. This immediately applies \"hot fixes\" to your cluster during browsing.</p>"},{"location":"apply-and-diff/#deploy-resource-changes-to-cluster","title":"Deploy Resource Changes to Cluster","text":"<p>After editing a resource in Monokle Desktop, click the Deploy button:</p> <p></p> <p>The following modal appears for selecting the namesapce for deployment:</p> <p></p> <p>Select an existing namespace from the cluster, create a new namespace, or don't specify a namespace, which will deploy into namespaces already declared in the resource.</p>"},{"location":"architecture/","title":"Monokle Desktop Architecture","text":"<p>Monokle Desktop is an Electron desktop application built with React &amp; TypeScript.  </p> <p>Redux Toolkit is used for state management.   </p> <p>Visuals are done using Ant Design.  </p> <p>Other fairly common libraries/frameworks are used internally for common functionality (see components below).   </p> <p>This project was bootstrapped from https://github.com/yhirose/react-typescript-electron-sample-with-create-react-app-and-electron-builder,  which provides: - TypeScript support for Electron main process source code. - Hot-relaod support for Electron app. - Electron-builder support.</p> <p>See https://www.electron.build/ for more info on Electron-builder.</p>"},{"location":"architecture/#folder-structure","title":"Folder Structure","text":"<ul> <li>/electron : Electron main thread - contains startup code and some ipc handlers invoked from the UI.</li> <li>/src : Root for Monokle Desktop UI application - contains App.tsx, Index.tsx, etc.<ul> <li>/components : UI components - coarse to fine grained; organisms -&gt; molecules -&gt; atoms</li> <li>/constants : constants..</li> <li>/models : type definitions for core objects (see below) and states</li> <li>/redux : redux-related code (selectors, hooks, store, reducers, thunks, services)</li> <li>/styles : styles..</li> <li>/utils : common utility functions</li> <li>/assets : icons/images/etc</li> </ul> </li> </ul>"},{"location":"architecture/#core-objects","title":"Core Objects","text":"<ul> <li>Most logic revolves around K8sResource objects which \"encapsulate\" all  data associated with a parsed resource.</li> <li>FileEntry objects correspond to a parsed file - which can contain 0..n K8s Resource objects.</li> <li>The AppState holds the main state of the application (see inline comments), state   changes are handled by the main reducer    and corresponding thunks</li> </ul>"},{"location":"architecture/#main-ui-components","title":"Main UI Components","text":"<p>The content of most high level organisms and  molecules should be fairly self-explanatory. A few highlights:</p> <ul> <li>The FileTreePane renders the selected folder.</li> <li>The NavigatorPane renders the main resource    navigator, including sections for Helm Charts and Kustomizations.</li> <li>The Monaco component renders the source editor using the   Monaco editor (same as used by VS Code).</li> <li>The FormEditor component renders nice forms for    K8sResources using the react-jsonschema-form component (see below), corresponding schemas/uiSchemas are    in the resources/form-schemas folder.</li> </ul>"},{"location":"architecture/#3rd-party-components-used","title":"3rd Party Components Used","text":"<ul> <li>https://github.com/eemeli/yaml for yaml parsing.</li> <li>https://github.com/react-monaco-editor/react-monaco-editor for source editing.</li> <li>https://github.com/micromatch/micromatch for dynamic filtering in navigator and file exclusion matching.</li> <li>https://github.com/JSONPath-Plus/JSONPath for finding refs/selectors in resources.</li> <li>https://github.com/rjsf-team/react-jsonschema-form for generating forms for k8s resources.</li> <li>https://github.com/wbkd/react-flow for graph diagrams.</li> <li>https://github.com/tweenjs/es6-tween for animation tweening.</li> <li>https://github.com/pengx17/monaco-yaml for yaml support in the source editor.</li> <li>https://github.com/paulmillr/chokidar for file watching.</li> <li>https://github.com/ant-design/ant-design/ for UI.</li> <li>https://github.com/styled-components/styled-components for custom styling.</li> </ul>"},{"location":"architecture/#dev-dependencies","title":"Dev Dependencies","text":"<ul> <li>https://github.com/gsoft-inc/craco for overriding CRA config for folder aliases,   see https://www.npmjs.com/package/craco-alias#examples.</li> </ul>"},{"location":"architecture/#k8s-schemas","title":"K8s Schemas","text":"<p>Monokle Desktop currently uses the latest 1.22.1 schemas for validation and editor functionality -  see this issue for making schema version configurable. </p> <p>Schemas are currently taken from  https://github.com/yannh/kubernetes-json-schema - strict version is used.</p>"},{"location":"cluster-integration/","title":"Cluster Integration","text":"<p>Although Monokle Desktop is mainly geared toward working with manifest files, it also has the capability to connect  to a cluster and show all contained resources, providing a convenient and easy way to inspect cluster resources.</p> <p>Monokle Desktop will automatically detect the default Kubeconfig file or it can be declared in Settings:</p> <p></p>"},{"location":"cluster-integration/#using-the-cluster-selector","title":"Using the Cluster Selector","text":"<p>Choose a cluster to work with by using the Cluster Selector:</p> <p></p> <p>If the Cluster Selector does not appear, ensure that the Show Cluster Selector option is checked in the Settings menu:</p> <p></p> <p>Selecting the Load button will attempt to populate the Resource Navigator with objects from the configured cluster:</p> <p></p> <p>Monokle Desktop is now in Cluster Mode (as indicated by the header at the top):</p> <p></p> <ul> <li>The File Explorer has been disabled if a folder had been previously selected.</li> <li>The Navigator contains all resources retrieved from the configured cluster:</li> <li>Resource navigation works as with files; selecting a resource shows its content in the source editor.</li> <li>Resource links are shown as before with corresponding popups/links/etc.</li> <li>Selecting Exit in the top right restores the contents of the Resource Navigator to the currently selected folder.</li> </ul>"},{"location":"cluster-issues/","title":"Troubleshooting Connections","text":"<p>Welcome to the Monokle troubleshooting guide for cluster connections. </p> <p>This page will provide you with two methods to help resolve any issues you may be experiencing when attempting to connect to your Kubernetes clusters through the Monokle app. The first method involves using the in-app proxy setting, while the second method involves manually configuring a proxy using the kubectl command.  </p> <ol> <li>Using the Proxy setting in Monokle <ul> <li>Within the Monokle application, navigate to the Settings panel and go to the \"Global Settings\" section. </li> <li>Click on the checkbox for \"Enable Proxy\". </li> <li>This setting will start a proxy to the Kubernetes API server before connecting to the cluster, which can be helpful for advanced authentication setups.</li> </ul> </li> </ol> <p>or </p> <ol> <li>Starting a Proxy server manually<ul> <li>If the proxy setting does not resolve the issue, you can try using a proxy manually. </li> <li>To do this, run the command \"kubectl proxy --port=PROXY_PORT\" in a terminal, replacing PROXY_PORT with the port you would like to open the proxy on. </li> <li>Next, create a kubeconfig file in any location on your local system, using the following format:   <pre><code>apiVersion: v1\nclusters:\n- cluster:\nserver: http://127.0.0.1:PROXY_PORT\nname: proxy\ncontexts:\n- context:\ncluster: proxy\nuser: proxy\nname: proxy\ncurrent-context: proxy\nusers:\n- name: proxy\n</code></pre></li> <li>Remember to replace PROXY_PORT with the same port you've used to open the proxy.</li> <li>In the Monokle application, open the Settings panel and navigate to the KUBECONFIG setting under Project Settings.</li> <li>Browse for the file you've created and select it to be used by Monokle. The Cluster Selector in the header should be updated with the new \"proxy\" context. </li> <li>Try connecting to the cluster again to see if the problem persists.</li> </ul> </li> </ol> <p>If the above solutions do not resolve your issue, please contact us on GitHub or Discord for further assistance.</p>"},{"location":"cluster-mode/","title":"Cluster Mode","text":"<p>The new Cluster Mode in Monokle 1.13 provides real-time insights into the state of your clusters. Once connected to a cluster, the icon to open Cluster Mode is in the left panel:</p> <p></p> <p>The initial overview provides general information about its state and contained resources:</p> <p></p> <p>The navigation on the left makes it easy to select types of resources and see their individual state and properties:</p> <p></p> <p>And the YAML for each resource can be easily viewed, modified and applied back to your cluster for quick fixes:</p> <p></p>"},{"location":"cluster-mode/#resource-validation-in-cluster-mode","title":"Resource Validation in Cluster Mode","text":"<p>All existing validation functionality already available in Monokle is applied to the resources found in your cluster - making it easy to find resources that have validation warning or errors - for example, in regard to the built-in OPA policies:</p> <p></p> <p>These errors are of course also highlighted in the source view - allowing you to immediately fix them and deploy the fixed resource back to your cluster.</p>"},{"location":"cluster-mode/#working-with-pods","title":"Working with Pods","text":""},{"location":"cluster-mode/#the-log-tab","title":"The Log Tab","text":"<p>After selecting a pod resource in the cluster dashboard, the log tab allows you to see logs in a specific pod.</p> <p></p>"},{"location":"cluster-mode/#the-shell-tab","title":"The Shell Tab","text":"<p>On the shell tab, you can interact with a pod, you can run shell commands in this pod and see the results.</p> <p></p>"},{"location":"compare-subfolders/","title":"Compare Subfolders","text":"<p>Monokle\u2019s Compare &amp; Sync feature allows subfolder comparison, which is helpful when your main configuration folder structure is complex and contains multiple subfolders with different content for the same resources. For example, when you have a GitOps repository with different folders for each target environment.</p> <p>Here we are comparing resources in the production and staging folders:</p> <p></p>"},{"location":"compare-sync/","title":"Compare &amp; Sync","text":"<p>The Compare &amp; Sync functionality allows you to compare and synchronize two sets of resources.</p> <p>Each set of resources can be one of the following: - Resources from your local manifest files. - Resources from a cluster. - Resources from the Preview of a Helm Chart. - Resources from the Preview of a Kustomization.</p> <p>Here are some of the scenarios where Compare &amp; Sync can help you: 1. Compare local resources to the resources in your cluster AND:   - Deploy local resources to the cluster.   - Extract cluster resources to local. 2. Compare resources between two clusters AND:  </p> <ul> <li>Deploy resources from one cluster to another.</li> <li>Compare resources between a Helm Chart or Kustomization preview to a cluster AND:  </li> <li> <p>Deploy the output of the Helm chart to the cluster.  </p> </li> <li> <p>Compare resources between a Helm Chart or Kustomization preview to your local resources AND:</p> </li> <li> <p>Extract resources from the preview to your local files.  </p> </li> <li> <p>Compare the output of a Helm Chart using two different values files.  </p> </li> <li> <p>Compare the output of two different Helm Charts.  </p> </li> <li> <p>Compare the output of a Helm Chart to the output of a Kustomization.  </p> </li> <li> <p>Compare two Kustomization outputs.</p> </li> </ul> <p>To use Compare &amp; Sync follow these steps:  </p> <ul> <li>Browse to a folder containing manifests/Kustomizations/Helm charts.  </li> <li>Press the Compare &amp; Sync button at the top of the Resource Navigator:  </li> </ul> <p></p> <p>In the image below you can see an overview of the Compare &amp; Sync modal with each section highlighted in a color that will be explained:  </p> <p></p> <p>The top bar, highlighted in red, contains a checkbox to select all rows and then 4 numbered inputs: 1. Search input for quickly filtering all rows by the name of the resources.  </p> <ol> <li> <p>Input for setting the default namespace that a resource should have if it's not already specified in it's yaml content.  </p> </li> <li> <p>Dropdown for selecting different options of comparison:  </p> </li> <li><code>View all</code> shows all resources from both left and right columns.  </li> <li><code>Only matching</code> will show only the resources that exist in both columns.  </li> <li><code>Only non-matching</code> will show resources that do not exist in either of the columns.  </li> <li><code>View left join</code> will show all resources from the left column, but only matching resources in the right column.  </li> <li> <p><code>View right join</code> will show all resources from the right column, but only matching resources in the left column.  </p> </li> <li> <p>Filter button which opens a panel that contains more filtering options.  </p> </li> </ol> <p>Under the top bar, we have two columns which both have their own configuration panel. In the overview, the columns are already configured. Before configuring the columns, the UI will look like this:  </p> <p></p> <p>Each column can be configured to specify the source of the resources that will be loaded in that column. If we look back at the Overview image from above, the green highlights show the following numbered inputs: 1. The dropdown to choose the source type for that column. The options are:   - <code>Local</code> for loading the resources from the local files in the current project.   - <code>Cluster</code> for loading resources from a cluster.   - <code>Helm Preview</code> for loading the output of a Helm Chart dry run.   - <code>Kustomize Preview</code> for loading the output of a Kustomization dry run. 2. Button for reloading the current resource set.  </p> <ol> <li> <p>Button for clearing the configuration of that column.  </p> </li> <li> <p>An additional inputs that appears depending on the source type:  </p> </li> <li>For <code>Cluster</code>, this input will be a dropdown for selecting the desired context.  </li> <li>For <code>Helm Preview</code>, there will be two inputs, one for choosing the Chart and one for choosing the Values file.  </li> <li>For <code>Kustomize Preview</code> there will be one input for choosing the Kustomization file.  </li> </ol> <p>After both columns are configured with the desired sources, the comparison will take place and you will be able to see the two sets of resources side by side (yellow color in the Overview image).  </p> <p>Clicking on a resource name will open a read-only editor for a quick view of the resource content.  </p> <p>The sections highlighted in light blue in the Overview image show the actions that can be done on the resources. In the middle blue section, each row of matching resources have the actions that can be applied to the resources. The Diff button appears only if there are differences between the two resources. The bottom buttons can be used for doing batch operations on the resources that are checked.  </p>"},{"location":"contributing/","title":"Contributing to Monokle Desktop","text":"<p>If you're interested in contributing to Monokle Desktop that's great - we love you!</p> <p>Please follow these steps to get started:</p> <ul> <li>Read our Code of Conduct.</li> <li>Fork/clone the Monokle Desktop repo and make sure you can build/run Monokle Desktop as described in Development.</li> <li>Have a look at the high-level Architecture document to get an overview of Monokle Desktop's architecture.</li> <li>Either start working on an idea of your own that you would like to contribute - or have a look at    the issues on GitHub - focus on those assigned to    an upcoming milestone.<ul> <li>To help you find a good issue to start with we have labeled easy issues with Good first issue.</li> <li>Once you've found an issue, fork / clone the Monokle Desktop repo and start working on it, and let us know    by commenting on the issue (so we don't start working on it also).</li> </ul> </li> <li>Once you've implemented the issue open a PR back to the Monokle Desktop repo so we can review and give you feedback. When all is    good we will approve the PR so it can be merged.</li> <li>If you've decided to move on to even greater things without finishing the issue that's fine    also (kudos for dedicating some time to an open-source project!), let us know so we can plan accordingly!</li> </ul> <p>Always feel free to reach out to us on our Discord Server if you have any questions on any of the above - or  anything else Monokle Desktop-related.</p> <p>Thank you!</p>"},{"location":"creating-resources/","title":"Creating Resources","text":""},{"location":"creating-resources/#add-a-resource","title":"Add a Resource","text":"<p>While using Monokle Desktop, you can directly add new K8s resources. Once you have browsed and added your project folder, click on the Create Resource button at the top of the navigator to open the Create Resource drop down.</p> <p></p> <p>Select \"New from scratch\" or New from template\".</p>"},{"location":"creating-resources/#new-from-scratch","title":"New from Scratch","text":"<p>While creating a resource, it is possible to select an existing resource as a template from the drop-down menu. The options for this template are Save to folder, Add to file and Don't save.  </p> <p></p> <p>If the last drop down is left as Don't save, that resource will be added to the Navigator resources but it will be highlighted in yellow:</p> <p></p> <p>These \u201cunsaved\u201d resources will have to be saved by the user to be able to reuse them. Clicking on a yellow resource will show the Save button in the Editor panel to save the highlighted resource.</p> <p></p>"},{"location":"creating-resources/#new-from-template","title":"New from Template","text":"<p>Monokle Desktop allows the use of templates to start a new project via the Start from a template option:</p> <p></p> <p>The Create a Project from a Template dialog appears:</p> <p></p> <p>Name your project, select its location and click Next: Select a Template.</p> <p>Monokle Desktop includes a default set of templates which are installed automatically when starting Monokle Desktop for the first time and available in the Templates Explorer when working with your Monokle Desktop projects:</p> <p></p> <p>Check out the Monokle Desktop Default Templates Plugin repository to  see the complete list of templates that are included along with their corresponding schemas and manifests.</p>"},{"location":"creating-resources/#navigator-resource-options","title":"Navigator Resource Options","text":"<p>Click the ellipsis to the right of a resource name to see the options available:</p> <p></p>"},{"location":"creating-resources/#deploy-a-resource","title":"Deploy a Resource","text":"<p>You can deploy a resource to a namespace, selecting an existing namespace, creating a new namespace or not choosing a namespace.</p> <p></p>"},{"location":"creating-resources/#rename-a-resource","title":"Rename a Resource","text":"<p>You can rename resources and update all the references associated with that resource to ensure the integrity of that link.</p> <p></p>"},{"location":"creating-resources/#clone-a-resource","title":"Clone a Resource","text":"<p>You can use the Clone action to create a new resource by using existing resources as a template. </p> <p></p>"},{"location":"creating-resources/#delete-a-resource","title":"Delete a Resource","text":"<p>You can use the Delete action in the cluster mode to delete the resource from the actual cluster. </p> <p></p>"},{"location":"desktop-v-SAAS/","title":"Using Monokle Desktop and Monokle Cloud","text":"<p>Monokle is available via both a locally installed desktop version and a cloud version to use without having to install in your environment. Monokle also includes a CLI and GitHub action that can be used to integrate in your development workflow.</p>"},{"location":"desktop-v-SAAS/#monokle-desktop","title":"Monokle Desktop","text":"<p>Monokle Desktop is for engineers that create and maintain high-quality Kubernetes Deployments.</p> <p>The desktop version focuses on enabling anybody to manage manifests and configuration independently of their knowledge level, before and after deployment, with specific features for creation of content easily through templates and snippets for single developers and platform engineers.</p> <p>To start working with Monokle Desktop, please follow this Getting Started guide \ud83d\ude80.</p>"},{"location":"desktop-v-SAAS/#monokle-cloud","title":"Monokle Cloud","text":"<p>Monokle Cloud is for teams managing and validating their Kubernetes deployments in Git.</p> <p>Monokle Cloud focuses on configuration visibility and policy enforcing. It helps to improve the security of the deployments in GitOps adding information about resources and policies applicable, making it easier to make decisions about whether to merge or not a PR, through the use of linters, policies and RBAC into the PR process and allowing collaboration.</p> <p>To access Monokle in the cloud, please visit https://app.monokle.com/ to get started.</p> <p></p>"},{"location":"desktop-v-SAAS/#comparing-version-functionality","title":"Comparing Version Functionality","text":""},{"location":"desktop-v-SAAS/#data-sources","title":"Data Sources","text":"<p>In Monokle Desktop, the following data sources are accessible:</p> <ul> <li>Local folders</li> <li>Git repos</li> <li>Clusters</li> </ul> <p>The following sources will be added soon:</p> <ul> <li>Helm repos</li> <li>Images repos</li> </ul> <p>Use Monokle Cloud to work directly with GitHub Repos and Kustomize.</p>"},{"location":"desktop-v-SAAS/#exploring-resources","title":"Exploring Resources","text":"<p>Both the Desktop and Cloud versions of Monokle offer the following ways to explore resources:</p> <ul> <li>Show files</li> <li>Resource included in manifests</li> <li>Understand links between artifacts</li> <li>Graph view*</li> <li>CRD processing </li> <li>Helm values &amp; Kustomize overlays processing</li> </ul>"},{"location":"desktop-v-SAAS/#editing-resources","title":"Editing Resources","text":"<p>Use Monokle Desktop to:</p> <ul> <li>Create and edit manifests.</li> <li>Use templates and code generators.</li> <li>Reuse templates bundled with the product or create your own.</li> <li>Automatically fix config errors.</li> <li>Create your own policies.*</li> </ul> <p>Creating your own policies is also a feature of Monokle Cloud.</p>"},{"location":"desktop-v-SAAS/#visualize-resources","title":"Visualize Resources","text":"<p>Both Monokle Desktop and Monokle Cloud allow you to: </p> <ul> <li>Show schema errors inline. </li> <li>Previsualize Helm charts.</li> <li>Preview Kustomizations. </li> </ul> <p>Monokle Desktop also has the capability to Preview Shell Commands.</p>"},{"location":"desktop-v-SAAS/#check-resources","title":"Check Resources","text":"<p>You can also use both products to:</p> <ul> <li>Check against specific K8s schemas. </li> <li>Visualize broken links. </li> <li>Check the results of OPA policies.  </li> </ul> <p>Plans for future checking functionalities in both Desktop and Cloud include: Results of other policies (Kyberno) and Define your own policies.</p>"},{"location":"desktop-v-SAAS/#compare-resources","title":"Compare Resources","text":"<p>Monokle has robust compare features for almost any resource. Compare Files, Folders, Helm Output, Kustomize Output, Configurations, Git Branches and Commits with both Desktop and Cloud.</p> <p>With Desktop, compare Configurations, Clusters and Shell Command Output.</p>"},{"location":"desktop-v-SAAS/#collaboration","title":"Collaboration","text":"<p>Collaborate on the following with Monokle Cloud:</p> <ul> <li>Group management. Create your own users and groups with access to the resources.</li> <li>Role-based access control (RBAC). Define what resources can be modified in your PR.*</li> <li>Quick sharing of URL of resources, errors in LoC, previews, comparisons, etc.</li> <li>Define and enforce company policies.</li> </ul> <p>Collaborate on Personal Shareable Policies with both versions of Monokle.</p>"},{"location":"desktop-v-SAAS/#publish","title":"Publish","text":"<p>Easily publish changes with Monokle Desktop and Monokle Cloud:</p> <ul> <li>Create a new branch or a new commit with changes.</li> <li>Synchronize with remote git servers.</li> <li>Create, visualize and manage pull requests.*</li> </ul> <p>In Monokle Desktop you can also Modify local files and Clusters.</p> <p>Create GitHub issues for errors (in-line) in Monokle Cloud.</p>"},{"location":"desktop-v-SAAS/#get-in-touch","title":"Get in Touch!","text":"<p>Have questions? Suggestions? Feature requests? Please join our Discord Server and let us know. </p>"},{"location":"desktop-v-SAAS/#_1","title":"Introducing Monokle Desktop and Monokle Cloud","text":"<p>* Coming soon!</p>"},{"location":"development/","title":"Development","text":"<p>Monokle Desktop is an Electron desktop application built with React &amp; TypeScript.  </p> <p>This project was bootstrapped from https://github.com/yhirose/react-typescript-electron-sample-with-create-react-app-and-electron-builder,  which provides:</p> <ul> <li>TypeScript support for Electron main process source code.</li> <li>Hot-reload support for Electron app.</li> <li>Electron-builder support.</li> </ul> <p>Check out the Architecture document for more information.</p>"},{"location":"development/#building-running","title":"Building &amp; Running","text":""},{"location":"development/#prerequisites","title":"Prerequisites","text":"<ul> <li>Download &amp; Install Git. OSX and Linux machines typically have this already installed.</li> <li>Download &amp; Install Node.js and the npm package manager.</li> <li>Clone this repository.</li> <li>Make sure you are running the node version specified in <code>.npmrc</code> or if you are using nvm, you can run the <code>nvm install</code> command to quickly install and use the required node version.</li> </ul>"},{"location":"development/#running","title":"Running","text":"<ol> <li> <p>Install npm dependencies: <pre><code>npm install\n</code></pre></p> </li> <li> <p>Start the application:</p> </li> </ol> <pre><code>npm run electron:dev\n</code></pre>"},{"location":"development/#hot-reloading","title":"Hot Reloading","text":"<p>The Electron app will reload if you make edits in the <code>electron</code> directory. You will also see any lint errors in the console.</p>"},{"location":"development/#building","title":"Building","text":"<p>Build the Electron app package for production:</p> <pre><code>npm run electron:build\n</code></pre> <p>The output will be located in the <code>dist</code> folder.</p>"},{"location":"development/#help-support","title":"Help &amp; Support","text":"<p>Feel free to reach out and ask questions on our Discord server.</p>"},{"location":"faq/","title":"FAQ","text":""},{"location":"faq/#1-what-are-the-prerequisites-for-using-monokle-desktop","title":"1. What are the prerequisites for using Monokle Desktop?","text":"<p>You will need to install the following two prerequisites to successfully run Monokle Desktop:</p> <ol> <li>Helm - Required for Helm Preview functionality.</li> <li>Kubectl - Required for Kustomize Preview and Deploy/Diff functionality.</li> </ol>"},{"location":"faq/#2-what-os-does-monokle-desktop-support","title":"2. What OS does Monokle Desktop support?","text":"<p>Monokle Desktop supports Windows, MacOS and Linux. Get the latest installers for MacOS and Windows on GitHub. For running Monokle Desktop on Linux, run it from the source, following the steps as outlined in the Getting Started documentation.</p>"},{"location":"faq/#3-why-cant-i-add-any-clusters","title":"3. Why can\u2019t I add any clusters?","text":"<p>While adding new clusters, a valid kubeconfig file is required. Please check that all the needed configuration settings are present in your kubeconfig file are valid. For more detail read the kubeconfig documentation.</p>"},{"location":"faq/#4-why-is-kubectl-required-to-run-monokle-desktop","title":"4. Why is Kubectl required to run Monokle Desktop?","text":"<p>You need to install and configure kubectl for previewing kustomization.yaml files. It helps to debug your configurations before you deploy them to your cluster.</p>"},{"location":"faq/#5-does-monokle-desktop-support-helm","title":"5. Does Monokle Desktop support Helm?","text":"<p>Yes, Monokle Desktop allows you to navigate and preview the output of a Helm chart for an existing values files. Read more at Working with Helm.</p>"},{"location":"faq/#6-can-i-work-on-multiple-projects-simultaneously","title":"6. Can I work on multiple projects simultaneously?","text":"<p>You can launch multiple project windows using the New Monokle Desktop Windows option. It allows you to work on multiple folders or clusters simultaneously; thus visual navigation for the multiple pages becomes simpler and faster.</p>"},{"location":"faq/#7-can-i-use-monokle-desktop-with-fluxargocd","title":"7. Can I use Monokle Desktop with Flux/ArgoCD?","text":"<p>Yes, Monokle Desktop can be used for creating / editing / debugging manifests before they are deployed to a cluster using a CD tool like ArgoCD or Flux.</p>"},{"location":"faq/#8-how-to-open-helm-and-kustomization-preview","title":"8. How to open Helm and Kustomization preview?","text":"<p>You can navigate to the resources created by Kustomize or Helm in the navigator. Hover over the resources and hit the  button to perform the preview and see the generated resources in the navigator.</p>"},{"location":"faq/#9-why-is-autocomplete-not-working-in-the-editor","title":"9. Why is Autocomplete not working in the editor?","text":"<p>The source editor provides an autocomplete option for only native Kubernetes resources. Therefore, the autocomplete feature is not available for any other resources except the resources in the YAML manifests.</p>"},{"location":"faq/#10-how-to-save-changes-in-the-editor","title":"10. How to save changes in the editor?","text":"<p>The source editor automatically saves the current changes in your resource manifests as long as they are valid YAML files.</p>"},{"location":"features/","title":"Feature Overview","text":"<p>Here is a short list of some of the features currently in Monokle Desktop.</p> <p>A big thanks to the excellent Argo-Rollouts project on GitHub for providing plentiful manifests for us to run Monokle Desktop against.</p>"},{"location":"features/#navigate-k8s-objects-easily","title":"Navigate K8s Objects Easily","text":"<p>Monokle Desktop compiles a list of all the objects in your repo (from files you didn't want ignored), to give you a handy overview of all your resources - read more here.</p>"},{"location":"features/#validate-and-follow-links-up-or-downstream-through-your-manifests","title":"Validate and Follow Links Up- or Downstream through your Manifests","text":"<p>Surf upstream or downstream through your resources! Monokle Desktop highlights other resources that your selection has direct relations to and even provides you with the links to go to them quickly - read more here.</p>"},{"location":"features/#preview-resources-generated-by-kustomize-and-helm","title":"Preview Resources Generated by Kustomize and Helm","text":"<p>To preview the resources created by Kustomize or Helm, open the corresponding pane at the bottom of the first column.</p> <p></p> <p></p> <p>Do a quick dry-run, enabling you to navigate and debug the resources created by Kustomize or Helm. Apply them to the cluster when you are satisfied - read more about Kustomize and Helm.</p>"},{"location":"features/#locate-source-file-quickly-and-find-dead-end-links","title":"Locate Source File Quickly and Find Dead-end Links","text":"<p>When you select a resource, Monokle Desktop will show which file it was defined in. A yellow warning triangle indicates that a resource is pointing to a link that does not exist.</p>"},{"location":"features/#browse-and-update-cluster-objects","title":"Browse and Update Cluster Objects","text":"<p>To browse a cluster instead of a repo, simply click the \"Preview\" button next to a file to import all objects from the cluster into Monokle Desktop - read more. If you need to make any immediate hot-fixes, simply modify the resource in the source editor and click the \"Apply\" button.</p>"},{"location":"features/#manage-multiple-projects","title":"Manage Multiple Projects","text":"<p>Easily switch in between projects to more efficiently work with multiple projects at the same time.</p>"},{"location":"features/#compare-resources","title":"Compare Resources","text":"<p>The Editor contains a Compare Resources button in the left panel.</p> <p></p> <p>Selecting Compare Resources will open the Comparing Resources window:</p> <p></p> <p>Almost anything that you work on in Monokle Desktop can be compared. Select from the drop down on the left side and the right side to do a compare of a local resource, a Kustomize or Helm preview or a cluster:</p> <p></p>"},{"location":"features/#create-a-resource-from-a-template","title":"Create a Resource from a Template","text":"<p>Return to the Monokle home screen by clicking on the Monokle icon at the top left:</p> <p></p> <p>Then select \"New project\":</p> <p></p> <p>Monokle Desktop allows the use of templates to start a new project via the Start from a template option:</p> <p></p> <p>The Create a Project from a Template dialog appears:</p> <p></p> <p>Name your project, select its location and click Next: Select a Template.</p> <p>Monokle Desktop includes a default set of templates which are installed automatically when starting Monokle Desktop for the first time and available in the Templates Explorer when working with your Monokle Desktop projects:</p> <p></p> <p>Check out the Monokle Desktop Default Templates Plugin repository to  see the complete list of templates that are included along with their corresponding schemas and manifests.</p>"},{"location":"file-explorer/","title":"File Explorer","text":"<p>The File Explorer shows all files parsed in the folder selected:</p> <ul> <li>Excluded files are greyed out.</li> <li>Files containing resource manifests have a number displayed after them, showing the number of resources found in that file.</li> </ul> <p>Selecting a file will highlight contained resources in the Navigator and attempt to scroll them into view. The contents of the  file will be shown in the source editor to the right, allowing for direct editing of the file.</p> <p></p> <p>In this screenshot:</p> <ul> <li>The argo-rollouts-aggregate-roles.yaml file is selected - the \"3\" after the filename indicates it contains 3 Kubernetes resources.</li> <li>The 3 ClusterRole resources in the file are highlighed in the Navigator in the middle of the screen.</li> <li>The contents of the file are shown in the editor to the right.</li> </ul> <p>While in the File Explorer, the File Action drop down list is available by clicking the ellipsis to the right of the file name.</p> <p></p> <p>In the File Actions pop up menu, the following actions are available:</p> <ul> <li>Add Resource</li> <li>Filter on this file</li> <li>Add to Files: Exclude</li> <li>Copy Path</li> <li>Copy Relative Path</li> <li>Duplicate</li> <li>Rename</li> <li>Delete</li> <li>Open on GitHub</li> <li>Reveal in Finder</li> </ul> <p>The same functionality is available for Folders:</p> <p></p> <p>In the Folder Actions pop up menu, the following actions are available:</p> <ul> <li>New Folder</li> <li>New File</li> <li>New Resource</li> <li>Filter on this folder</li> <li>Add to Files: Exclude</li> <li>Copy Path</li> <li>Copy Relative Path</li> <li>Duplicate</li> <li>Rename</li> <li>Delete</li> <li>Open on GutHub</li> <li>Reveal in Finder</li> </ul>"},{"location":"form-editor/","title":"Using the Form Editor","text":""},{"location":"form-editor/#edit-resources-properties-via-form","title":"Edit Resources Properties via Form","text":"<p>Monokle Desktop shows form editors for diverse Kubernetes resources which allows you to interactively change the specification of your resources using visual controls/inputs.</p> <p></p> <p>For example in the case of a ConfigMap Kubernetes resource, clicking on the Form tab at the top of the Editor, opens the form fields editor for key ConfigMap properties, allowing you to edit/discover all available properties without having to learn or lookup the corresponding YAML/resource documentation. Any changes made and saved (with the Save button on the top right) are written back to the underlying YAML. </p>"},{"location":"form-editor/#modified-values-highlighted-in-code-editor","title":"Modified Values Highlighted in Code Editor","text":"<p>To have insight into the changes made to your configuration, the exact properties edited with Monokle\u2019s Form Editor are highlighted when you make the transition from the Form Editor tab to the Source tab. This highlighting feature identifies all changes providing full visibility of edited resources as you work toward attaining your desired state.</p> <p></p>"},{"location":"form-editor/#side-by-side-editors","title":"Side-by-Side Editors","text":"<p>The configuration file you are editing can be visible even when you are using templates.</p> <p>Click on the side-by-side icon at the top right of the editor to open a side-by-side view showing the source code on the left and the form editor on the right, providing instant visibility of the changed files while updating the state. </p> <p></p> <p></p>"},{"location":"form-editor/#using-the-object-metadata-editor","title":"Using the Object Metadata Editor","text":"<p>To launch the Metadata Editor, click on the Metadata tab.</p> <p></p> <p>For editing object metadata, you need to provide a specific name, namespace, annotations, labels, cluster name, generate name, and finalizers to uniquely identify the object.  </p> <p>Check out this tutorial for more details  on how to use the Form Editor and Metadata.</p>"},{"location":"getting-started/","title":"Getting Started","text":""},{"location":"getting-started/#download-install","title":"Download &amp; Install","text":"<p>Download and install the latest version from GitHub below</p>"},{"location":"getting-started/#macos","title":"macOS","text":"<p>Download the <code>.dmg</code> file.</p>"},{"location":"getting-started/#windows","title":"Windows","text":"<p>Download the <code>.exe</code> file.</p>"},{"location":"getting-started/#linux-since-monokle-130","title":"Linux (since Monokle 1.3.0)","text":"<p>Download the <code>.appImage</code>/<code>.deb</code> file for your platform.</p>"},{"location":"getting-started/#run-from-source","title":"Run from Source","text":"<p>See Development on how to run Monokle Desktop from its source-code.</p>"},{"location":"getting-started/#install-dependencies","title":"Install Dependencies","text":"<p>Monokle Desktop uses Helm, Kubectl and Kustomize for corresponding preview functionality, and Git for version control.</p> <ol> <li>Helm - required for Helm Preview functionality</li> <li>Kubectl or Kustomize - required for Kustomize Preview and Apply/Diff functionality</li> <li>Git - required for Version Control</li> </ol>"},{"location":"getting-started/#read-tutorials","title":"Read Tutorials","text":"<p>Check out one of our tutorials to get started:</p> <ul> <li>How to Work with Manifests to get you started with basic concepts.</li> <li>How to Browse Clusters to help you interact with your cluster(s).</li> <li>How to Configure Monokle Desktop to see how you can set up Monokle Desktop to your needs.</li> <li>How to Fix Broken Links to give you an idea of how Monokle Desktop can be used for resource validation and correction.</li> <li>How to Work with ConfigMaps to see how the Form editor for ConfigMaps helps you edit resources without having to write any YAML.</li> </ul>"},{"location":"getting-started/#get-in-touch","title":"Get in Touch!","text":"<p>Have problems? Suggestions? Feature requests? Please join our Discord Server and let us know - or  open an issue on GitHub. </p>"},{"location":"git-integration/","title":"Git Integration for DevOps &amp; GitOps","text":"<p>Git is integrated into Monokle Desktop to tackle GitOps seamlessly within the application. If you work within a DevOps culture our Git integration provides advantages for you and your team by keeping a history of changes made to your applications stored in Git to ensure access to a reliable audit trail of your changes.</p>"},{"location":"git-integration/#getting-started-with-a-new-project-clone-a-git-repository","title":"Getting Started with a New Project: Clone a Git repository","text":"<p>You can use a Git repository URL to start a new project. The repository will be cloned to the selected location and then opened into Monokle Desktop.</p> <p></p> <p>This allows multiple colleagues to debug, validate, and diff all of your configuration files taking full advantage of all of the features of Monokle Desktop to achieve your desired state while also maintaining clear control of your version changes.</p>"},{"location":"git-integration/#branch-selector","title":"Branch Selector","text":"<p>In the header, next to the Project Selector, a dropdown menu appears whenever Monokle Desktop detects the current project has a Git repository.</p> <p>With the Branch Selector, you can search through all of your local and remote branches in more detail while having the option of creating new local branches.</p>"},{"location":"git-integration/#git-panel","title":"Git Panel","text":"<p>In the left menu of Monokle Desktop, there is a dedicated Git panel.</p> <p>This panel contains the Changelist which is grouped into two lists: Staged and Unstaged files. By clicking on each file, you will immediately see the differences between the old version and the newer, modified version with valuable insight as you work to achieve your desired state. </p> <p>Using the checkboxes, select multiple files to apply the same action at once. After staging some of the files, you can commit the changes directly via Monokle Desktop. Once staged changes have been committed, unpublished branches can be directly published to remote through Monokle Desktop simply push your commits.</p>"},{"location":"helm/","title":"Working with Helm","text":"<p>Monokle Desktop has built-in support for Helm - a popular tool for managing Kubernetes configurations:</p> <ul> <li>Monokle Desktop can identify and show Helm charts and their values files.  </li> <li>Monokle Desktop can preview resources generated by Helm, helping you debug your charts before you deploy them to your cluster. This requires Helm to be installed and configured in your PATH.</li> </ul> <p>All examples below are from the Emissary Ingress Charts Folder - clone and try these yourself!</p>"},{"location":"helm/#configuring-helm-integration","title":"Configuring Helm Integration","text":"<p>In Settings, set which Helm command to use when generating Helm previews in Monokle Desktop:</p> <p></p>"},{"location":"helm/#helm-preview-configurations","title":"Helm Preview Configurations","text":"<p>Each Helm chart has a subsection named Preview Configurations. This allows you to configure how to run the Helm Preview and then save the configuration in order to quickly use it at any time.</p> <p></p> <p>Hovering over the Preview Configurations section will show a Plus button to the right:</p> <p></p> <p>Clicking on the button will open a Drawer to the right:</p> <p></p> <p>This form allows you to: - Name your configuration. - Choose and order which values files to be used for the preview. - Choose between using the helm template or helm install commands. - And, optionally, provide options for the command. See more about the options in Helm\u2019s documentation: https://helm.sh/docs/helm/helm_install/.</p> <p>Finally, you can save your configuration for later use or save it and start previewing the resources right away.</p> <p>Saved Preview Configurations will show up in the subsection of the Helm chart it was created for:</p> <p></p> <p>By hovering over the configuration you will see the Preview, Edit and Delete actions.</p> <p>If you instead click and select the configuration, the source code editor from the right will be replaced with the Helm Command Pane, which will display the generated command that will be run by Monokle Desktop to create the preview:</p> <p></p>"},{"location":"helm/#helm-navigation","title":"Helm Navigation","text":"<p>When selecting a folder containing Helm charts (identified by Chart.yaml files), these will automatically be displayed in  a \"Helm Charts\" section on top of the Navigator:</p> <p></p> <p>In the screenshot:</p> <ul> <li>The Helm Charts section shows the \"emissary-ingress\" Helm chart and the contained values files.</li> <li>The single values.yaml file has been selected.</li> <li>The corresponding values.yaml file has been highlighted to the left.</li> <li>The content of the file is shown in the Source editor on the right of the screen.</li> </ul> <p>The Navigator at this point shows any K8s resources that Monokle Desktop finds in the selected folder.</p>"},{"location":"helm/#helm-preview","title":"Helm Preview","text":"<p>The Helm Preview functionality helps you understand what resources would be installed in your cluster when running Helm with  a specific values file.</p> <p>Hovering over a values file reveals a Preview action to the right:</p> <p></p> <p>Selecting this action will run Helm on the selected file with either the <code>install</code> or <code>template</code> option (as configured in the global settings) and replace the contents of the Navigator with the generated resources.</p> <p>For example, previewing the values file above will result in the following:</p> <p></p> <p>Monokle Desktop is now in Preview Mode (as indicated by the header at the top):</p> <ul> <li>The File Explorer has been disabled.</li> <li>The Navigator now contains all resources generated by running Helm with the selected values file.<ul> <li>Resource navigation works as with files; selecting a resource shows its content in the source editor in read-only mode.</li> <li>Resource links are shown as before with corresponding popups/links/etc.</li> </ul> </li> <li>Selecting Preview for a different values file will switch the preview to the output of Helm for that file.</li> <li>Selecting Exit in the top right or next to the values file restores the previous resource navigator.</li> </ul>"},{"location":"helm/#editing-of-values-files","title":"Editing of Values Files","text":"<p>If you're editing Helm Values files, Monokle Desktop will highlight all properties that have been referenced by any templates. The list of paths to template files is shown when hovering over the highlighted value.</p> <p></p> <p>When previewing a Helm values file, it is possible to edit the previewed file and recreate the preview, allowing you to quickly assess the impact of any changes on the generated files, instead of having to exit and recreate the preview to make a change.</p> <p></p> <p></p>"},{"location":"helm/#working-with-helm-templates","title":"Working with Helm Templates","text":"<p>Each Helm Chart from the Helm pane has a subsection which displays all templates of that chart. Clicking on a template will select it and open it in the Editor.</p> <p>When you hover over a value referenced from a Values file, the popup that appears will display the following information: - The path to the values file where the reference is from. - The referenced value, so you don't have to switch to the Values file. - A link to quickly navigate to the location of that value.</p> <p></p> <p>If Monokle Desktop cannot find any values file with the referenced path from a Helm template, it will highlight it in yellow:</p> <p></p>"},{"location":"hotkeys/","title":"Monokle Desktop Keyboard Shortcuts","text":"<p>Monokle Desktop currently supports the following keyboard shortcuts:</p> <ul> <li>Connect to Cluster: Ctrl/Cmd I</li> <li>Settings: Ctrl/Cmd , (Comma)</li> <li>Exit Preview: ESC</li> <li>Browse Folder: Ctrl/Cmd O</li> <li>Refresh Folder: Ctrl/Cmd F5</li> <li>Toggle Left Pane: Ctrl/Cmd B</li> <li>Toggle Right Pane: Ctrl/Cmd ALT B</li> <li>Save (in editors): Ctrl/Cmd S</li> <li>Navigate Back (Selection History): ALT ArrowLeft</li> <li>Navigate Forward (Selection History): ALT ArrowRight</li> <li>Open New Resource Wizard: Ctrl/Cmd N</li> <li>Apply Resource or File to cluster: Ctrl/Cmd ALT S</li> <li>Diff Resource: Ctrl/Cmd ALT D</li> <li>Open File Explorer Tab: Ctrl/Cmd Shift E</li> <li>Open Cluster Tab: Ctrl/Cmd Shift C</li> <li>Open Kustomization Tab: Ctrl/Cmd Shift K</li> <li>Open Helm Tab: Ctrl/Cmd Shift H</li> <li>Open Validation Tab: Ctrl/Cmd Shift V</li> <li>Open Terminal Pane: Ctrl/Cmd ` (Backtick)</li> <li>Reset Resource Filters: Ctrl/Cmd ALT R</li> <li>Open Quick Search: Ctrl/Cmd SHIFT P</li> <li>Zoom In: Ctrl/Cmd =</li> <li>Zoom Out: Ctrl/Cmd -</li> <li>Open Shortcuts: Ctrl/Cmd /</li> <li>Reload Preview: Ctrl/Cmd R</li> <li>Scale Deployment: Ctrl/Cmd Shift S</li> </ul>"},{"location":"images/","title":"Working with Images","text":"<p>Monokle Desktop has a dedicated Images panel which can be accessed from the menu:</p> <p></p> <p>Clicking Images will show the list of all images that are found in the Navigator. The list of images will changed based on the Mode you're in: - Local mode - Preview mode (Helm or Kustomize) - Cluster mode</p> <p></p> <p>Clicking on an Image will select it and will open an Image Details panel on top of the Editor.</p> <p>In the panel, you can find basic information about the image and browse the image's tags.</p> <p></p> <p>Hovering over an image will show the \"Replace\" action:</p> <p></p> <p>Clicking on \"Replace\" will open a modal which allows you to enter a new tag for that image:</p> <p></p> <p>After clicking \"Done\", the tag will be replaced with the newly specified value across all your resources.</p>"},{"location":"kustomize/","title":"Working with Kustomize","text":"<p>Monokle Desktop has built-in support for Kustomize - a popular tool for managing Kubernetes configurations:</p> <ul> <li>Monokle Desktop can visualize dependencies and relationships between kustomize files to help you understand the scope of   a specific kustomization.</li> <li>Monokle Desktop can preview resources generated by Kustomize, helping you debug your configurations before you deploy them to    your cluster (requires kubectl to be installed and configured in your PATH).</li> </ul> <p>All examples below are from the Argo Rollouts Manifest Folder - clone and try these yourself!</p>"},{"location":"kustomize/#configuring-kustomize-integration","title":"Configuring Kustomize Integration","text":"<p>In Settings, set the defaults for working with Kustomize in Monokle Desktop:</p> <p></p> <p>Use the drop-down selector to select how to invoke Kustomize when previewing or applying kustomization files:</p> <p></p> <p>Tick the check box to enable Helm-related functionality when invoking Kustomize.</p>"},{"location":"kustomize/#kustomize-navigation","title":"Kustomize Navigation","text":"<p>To work with a project's kustomization.yaml files, click Kustomize:</p> <p></p> <p></p> <p>In the screenshot:</p> <ul> <li>The Kustomize section shows all kustomization.yaml files - named after the folder they are in relative to the selected root folder.</li> <li>The \"base\" kustomization.yaml has been selected<ul> <li>The corresponding kustomization.yaml file has been highlighted to the left.</li> <li>All \"downstream\" kustomizations and included resources are highlighted in the Navigator, helping you understand the \"scope\" of the selected kustomization.</li> <li>The content of the kustomzation resource is shown in the Source editor to the right, with corresponding resource links marked in the code.</li> </ul> </li> </ul> <p>Just as with K8s resources, hovering over the link-icon to the right of the kustomization name shows its outgoing links:</p> <p></p> <p>Here we can see the 10 resources included by the selected kustomization.</p> <p>Hovering the link-icon to the left of the kustomization name shows its incoming links:</p> <p> </p> <p>Here we see one \"upstream\" kustomization that include the selected kustomization in its configuration.</p>"},{"location":"kustomize/#kustomize-preview","title":"Kustomize Preview","text":"<p>While the above helps you understand the relationships and dependencies between kustomizations and their included resources, the Preview functionality helps you understand what resources would be installed in your cluster when running kustomize.</p> <p>Hovering over a kustomization reveals a Preview action to the right:</p> <p></p> <p>Selecting this action will run kustomize on the selected file with the -k option and replace the contents of the Navigator with the  generated resources.  </p> <p>For example previewing the \"base\" kustomization above will result in the following:</p> <p></p> <p>Monokle Desktop is now in Preview Mode (as indicated by the header at the top):</p> <ul> <li>The File Explorer has been disabled.</li> <li>The Navigator now contains all resources generated by running Kustomize with the \"base\" kustomization:<ul> <li>Resource navigation works as with files; selecting a resource shows its content in the source editor in read-only mode.</li> <li>Resource links are shown as before with corresponding popups/links/etc.</li> </ul> </li> <li>Selecting Preview for a different kustomization will switch the output of kustomize to that resource instead.</li> <li>Selecting Exit in the top right or next to the kustomization restores the previous resource navigator.</li> </ul> <p>In the screenshot we can see that the selected kustomization resulted in 14 resources that contain references to the image specified in the kustomization configuration:</p> <p></p>"},{"location":"kustomize/#editing-of-kustomizations-during-preview","title":"Editing of Kustomizations During Preview","text":"<p>When previewing a kustomization, it is possible to edit the previewed kustomization.yaml file and reload the preview, allowing  you to quickly assess the impact of any changes on the generated files, instead of having to exit and recreate the preview to make a change.</p> <p></p>"},{"location":"overview/","title":"UI Overview","text":""},{"location":"overview/#launch-monokle-desktop","title":"Launch Monokle Desktop","text":"<p>Note: Please follow this Getting Started guide to install Monokle Desktop \ud83d\ude80</p> <p>Launch Monokle Desktop and, on the welcome screen, there are three options to start working with projects:</p> <ul> <li>Select a folder with K8s resources.</li> <li>Create a project from scratch.</li> <li>Start from a template.</li> </ul> <p></p> <p>On subsequent start-ups, Monokle Desktop automatically loads the most recently selected folder, if the corresponding \"Load recent folder on Startup\" setting has been enabled:</p> <p></p>"},{"location":"overview/#working-with-projects","title":"Working with Projects","text":"<p>Click Select an existing folder to add your project folder containing K8 resources. </p> <p>Monokle Desktop is laid out like many other desktop applications:</p> <p></p> <p>Left to right:</p> <ul> <li>The vertical toolbar to the far left is where you will find functions like Resource Compare, views for Validation Errors, Git Operations, Cluster Dashboard and Settings which will be described later in the documentation.</li> <li>The File Explorer (shown in screenshot) shows the contents of the currently selected folder.</li> <li>The Navigator in the center shows all resources found in the current folder or cluster. By default it shows all possible   Resource sections and subsections - when selecting a folder or cluster only those sections that actually contain   any resources will be shown.</li> <li>The Editor section to the right contains editors/views/actions for the currently selected resource or file.</li> </ul> <p>The top right contains the following buttons:</p> <ul> <li>The current K8s schema version.</li> <li>The currently configured cluster.</li> <li>Show Latest Notifications</li> <li>An ellipsis with the following selections:</li> <li>Help</li> <li>Keyboard Shortcuts -&gt; See Monokle Desktop Keyboard Shortcuts for a complete list of keyboard shortcuts.</li> <li>Documentation -&gt; opens the Monokle Desktop documentation in your system browser.</li> <li>New in (Latest Version) -&gt; See the most recent updates.</li> <li>Replay Quick Guide - Replay the Quick Guide pop ups for Monokle Desktop screen navigation.</li> <li>GitHub -&gt; opens the Monokle Desktop GitHub repo in your system browser.</li> <li>Discord -&gt; Opens Discord to talk to us about your Monokle Desktop experience.</li> <li>About Monokle Desktop -&gt; Details about the current version of Monokle Desktop.</li> <li>Feedback -&gt; Our feedback survey.</li> </ul>"},{"location":"overview/#settings","title":"Settings","text":"<p>While working in a project, clicking the Settings icon in the vertical toolbar on the left to open the settings modal for the current project:</p> <p></p> <p>The first tab allows you to configure validation policies.</p> <p>The Current Project Settings tab contains the the setting that can be modified for the open project only.</p> <p></p> <ul> <li>Project Name</li> <li>Kubernetes Version: Sets Kubernetes' schema version for validation.</li> <li>Kubeconfig: Sets which kubeconfig Monokle Desktop should use for all cluster interactions.</li> <li>Files: Include: Sets which files to parse for kubernetes resources when scanning folders.</li> <li>Files: Exclude: Sets which files/folders to exclude when scanning folders for resources.</li> <li>Hide excluded files check box.</li> <li>Hide unsupported files check box.</li> <li>Helm Preview Mode: Sets which Helm command to use for generating previews (see Working with Helm Charts).<ul> <li>Template: uses Helm Template</li> <li>Install: uses Helm Install</li> </ul> </li> <li>Kustomize Command: Sets how to invoke kustomize when previewing and applying kustomization file.<ul> <li>Use kubectl</li> <li>Use kustomize</li> </ul> </li> <li>Maximum folder read recursion depth: Configures how \"deep\" Monokle Desktop will parse a specified folder (to avoid going too deep).</li> <li>Resource links processing:<ul> <li>Ignore optional unsatisfied links.</li> </ul> </li> <li>Form Editor<ul> <li>Create default objects.</li> <li>Set default primitive values.</li> </ul> </li> <li>Cluster Mode<ul> <li>Allow editing resources.</li> </ul> </li> <li>UI Preferences<ul> <li>Hide editor placeholder.</li> </ul> </li> </ul>"},{"location":"overview/#global-settings","title":"Global Settings","text":"<p>Click the Monokle icon in the top left corner to return to the Monokle home page and click on settings.</p> <p></p> <p></p>"},{"location":"overview/#global-settings_1","title":"Global Settings","text":"<ul> <li>Projects Root Path</li> <li>On Startup: <ul> <li>Automatically load last project.</li> <li>Show Cluster Selector.</li> </ul> </li> <li>Telemetry:<ul> <li>Disable gathering of usage metrics.</li> <li>Disable gathering of error reports.</li> </ul> </li> </ul>"},{"location":"overview/#plugins-manager","title":"Plugins Manager","text":"<p>See Monokle Plugins Manager for complete details.</p>"},{"location":"overview/#global-project-settings","title":"Global Project Settings","text":"<ul> <li>Project Name</li> <li>Kubernetes Version: Sets Kubernetes' schema version for validation.</li> <li>Kubeconfig: Sets which kubeconfig Monokle Desktop should use for all cluster interactions.</li> <li>Files: Include: Sets which files to parse for kubernetes resources when scanning folders.</li> <li>Files: Exclude: Sets which files/folders to exclude when scanning folders for resources.</li> <li>Hide excluded files check box.</li> <li>Hide unsupported files check box.</li> <li>Helm Preview Mode: Sets which Helm command to use for generating previews (see Working with Helm Charts).<ul> <li>Template: uses Helm Template</li> <li>Install: uses Helm Install</li> </ul> </li> <li>Kustomize Command: Sets how to invoke kustomize when previewing and applying kustomization file.<ul> <li>Use kubectl</li> <li>Use kustomize</li> </ul> </li> <li>Maximum folder read recursion depth: Configures how \"deep\" Monokle Desktop will parse a specified folder (to avoid going too deep).</li> <li>Resource links processing:<ul> <li>Ignore optional unsatisfied links.</li> </ul> </li> <li>Form Editor<ul> <li>Create default objects.</li> <li>Set default primitive values.</li> </ul> </li> <li>Cluster Mode<ul> <li>Allow editing resources.</li> </ul> </li> <li>UI Preferences<ul> <li>Hide editor placeholder.</li> </ul> </li> </ul>"},{"location":"overview/#system-menu","title":"System Menu","text":"<p>Monokle Desktop provides a system menu with the common File/Edit/View/Window/Help functionality.</p> <p>Mac System Menu:</p> <p></p> <p>Windows System Menu:</p> <p></p>"},{"location":"overview/#multiple-windows","title":"Multiple Windows","text":"<p>You can launch multiple project windows using the New Monokle Desktop Windows option. This allows you to work on multiple folders or clusters simultaneously. Thus visual navigation for the recently used pages becomes simpler and faster.</p> <p>Action: File &gt; New Monokle Desktop Window</p> <p></p>"},{"location":"overview/#auto-update","title":"Auto-update","text":"<p>The Monokle Desktop (on Mac) / Help (on Windows) system menus provide a \"Check for Update\" action that will check for an update and prompt to download, if available.</p> <p></p>"},{"location":"plugins/","title":"What is a Plugin?","text":"<p>Simply, any GitHub repository that contains a <code>package.json</code> file (the plugin entry file) can be installed as a plugin if the entry file follows the structure of a Monokle Desktop plugin.</p>"},{"location":"plugins/#what-is-the-structure-of-packagejson-for-a-valid-monokle-desktop-plugin","title":"What is the structure of <code>package.json</code> for a valid Monokle Desktop plugin?","text":"<p>Monokle Desktop uses the following properties: <code>name</code>, <code>author</code>, <code>version</code> <code>repository</code>, <code>description</code>, and <code>monoklePlugin</code>.</p> <p>The <code>monoklePlugin</code> property should be an object containing an array named <code>modules</code>.</p> <p>Here\u2019s an example of a <code>package.json</code> for a Monokle Desktop plugin:</p> <pre><code>{\n\"name\": \"My first plugin\",\n\"description\": \"Hello world!\",\n\"version\": \"1.0.0\",\n\"author\": \"Kubeshop\",\n\"repository\": \"https://github.com/kubeshop/monokle-default-templates-plugin\",\n\"monoklePlugin\": {\n\"modules\": []\n}\n}\n</code></pre>"},{"location":"plugins/#what-types-of-modules-does-a-plugin-support-or-what-does-a-module-look-like","title":"What types of modules does a Plugin support or what does a module look like?","text":"<p>With the release of 1.5.0 we are only supporting Template modules. More module types will be added in future versions.</p> <p>Each plugin may have multiple modules.</p> <p>Here is how you can reference a template module:</p> <pre><code>\"monoklePlugin\": {\n\"modules\": [\n{\n\"type\": \"template\",\n\"path\": \"&lt;relative-path-to-template-folder&gt;\"\n}\n]\n}\n</code></pre> <p>Read more about templates here.</p>"},{"location":"plugins/#how-do-i-install-a-plugin","title":"How do I install a Plugin?","text":"<p>Open the Plugins manager from the top right icon:</p> <p></p> <ol> <li>Click on the + Install button:</li> </ol> <p></p> <ol> <li>A modal will appear asking for the Plugin URL:</li> </ol> <p></p> <ul> <li>The URL must be a valid GitHub repository url in the format https://github.com/[user]/[repository].</li> <li>The primary branch should be <code>main</code>. The plugin installer will search there for the <code>package.json</code> file.</li> </ul>"},{"location":"plugins/#how-do-i-manually-install-a-plugin","title":"How do I manually install a Plugin?","text":"<p>This should be used only as a workaround for developing plugins.</p> <p>On Mac:</p> <ul> <li>Copy your plugin folder to <code>/Users/&lt;YourUser&gt;/Libray/Application Support/monokle/monoklePlugins</code>.</li> <li>Reopen or reload Monokle Desktop (from Window -&gt; Reload).</li> </ul> <p>On Windows:</p> <ul> <li>Copy your plugin folder to <code>C:\\Users\\&lt;YourUser&gt;\\AppData\\Roaming\\monokle\\monoklePlugins</code>.</li> <li>Reopen or reload Monokle Desktop (from Window -&gt; Reload).</li> </ul>"},{"location":"projects/","title":"Working with Projects","text":""},{"location":"projects/#launch-monokle-desktop","title":"Launch Monokle Desktop","text":"<p>Note: Please follow this Getting Started guide to install Monokle Desktop \ud83d\ude80</p> <p>Launch Monokle Desktop and, on the welcome screen, there are three options to start working with projects:</p> <ul> <li>Select an exisiting folder.</li> <li>Create an empty project.</li> <li>Start from a template.</li> </ul> <p></p> <p>Click Select an existing folder and navigate to an existing project folder containing K8 resources. </p> <p></p>"},{"location":"projects/#select-and-manage-a-project","title":"Select and Manage a Project","text":"<p>After a project is opened in Monokle Desktop, the project selector at the top of the screen will denote the project that is being displayed in the IDE.</p> <p>Select the Monokle icon at the tof left of the screen to switch between projects:</p> <p></p>"},{"location":"projects/#manage-multiple-projects","title":"Manage Multiple Projects","text":"<p>Easily switch in between projects to more efficiently work with multiple projects at the same time.</p>"},{"location":"resource-crds/","title":"Custom Resource Definitions","text":"<p>The CustomResourceDefinition API resource allows you to define custom resources.  Defining a CRD object creates a new custom resource with a name and schema that you specify. The Kubernetes API serves and handles the storage of your custom resource. Read more about CRDs here.</p>"},{"location":"resource-crds/#how-are-crds-used-by-monokle-desktop","title":"How are CRDs used by Monokle Desktop?","text":"<p>Monokle Desktop uses CRDs to recognize the Custom Resources that you're creating. All CRDs that registered in Monokle and installed on the cluster are visible on Cluster Definition section on Cluster Dashboard </p> <p></p> <p>By default, any Custom Resource that does not have a CRD registered in Monokle Desktop, will show up in the Navigator under the \"Unknown Resources\" section.  </p> <p>After registering a CRD, Monokle Desktop will do the following:   - Validate Custom Resources based on the schema provided by the CRD.    - Generate Form Editors based on the CRD schema.   - Enable Cluster interactions on the Custom Resources.  </p>"},{"location":"resource-crds/#how-can-you-register-a-crd","title":"How can you register a CRD?","text":"<p>There are 2 ways:</p> <ol> <li> <p>Load the objects from a Cluster. Monokle Desktop will scan the resources and, if it finds a CRD, it will register it so it can later recognize the Custom Resources.</p> </li> <li> <p>Use the CRDs Schema panel from the Validation tab. This panel lists all the CRDs that are already registered in Monokle Desktop and you can register new CRDs by providing a URL pointing to YAML content.</p> </li> </ol> <p></p> <p></p>"},{"location":"resource-editing/","title":"Editing Resources","text":"<p>Monokle Desktop allows you to edit resource manifests either in a Source Editor or a Form-based Editor which hides the underlying YAML complexity.</p>"},{"location":"resource-editing/#editing-resources_1","title":"Editing Resources","text":"<p>When editing resources (not files), the editor is schema-aware for all native Kubernetes resources, which provides auto-complete (Ctrl-Space) and context-sensitive hover documentation.</p> <p></p> <p></p> <p>When editing a resource, click on the document icon at the top right of the Editor pane to open the corresponding Kubernetes documentation in a browser window:</p> <p> </p>"},{"location":"resource-editing/#working-with-multiple-resources","title":"Working with Multiple Resources","text":"<p>Select multiple resources by clicking the checkbox to the left of the resource name. Below, two resources are selected and the Delete or Deploy actions are available for both resources.</p> <p> </p>"},{"location":"resource-editing/#add-a-resource","title":"Add a Resource","text":"<p>While using Monokle Desktop, you can directly add new K8s resources. Once you have browsed and added your project folder, click on the New Resource button at the top of the navigator to launch the Add New Resource dialog.</p> <p></p> <p>While creating a resource, it is possible to select an existing resource as a template from the drop-down menu. </p> <p></p>"},{"location":"resource-editing/#edit-resources-in-a-cluster","title":"Edit Resources in a Cluster","text":"<p>You can easily view and edit resources from clusters. After making changes in a resource, you can quickly deploy them back to the cluster.</p> <p></p>"},{"location":"resource-editing/#editing-files","title":"Editing Files","text":"<p>When editing files directly by selecting them in the File Explorer, the editor will not show any links or provide context-sensitive editing functionality.</p>"},{"location":"resource-editing/#navigator-resource-options","title":"Navigator Resource Options","text":"<p>Click the ellipsis to the right of a resource name to see the options available:</p> <p></p> <p>Unknown Resources will display in the Navigator but only have the Rename and Delete options:</p> <p></p>"},{"location":"resource-editing/#rename-a-resource","title":"Rename a Resource","text":"<p>You can rename resources and update all the references associated with that resource to ensure the integrity of that link.</p> <p></p>"},{"location":"resource-editing/#clone-a-resource","title":"Clone a Resource","text":"<p>You can use the Clone action to create a new resource by using existing resources as a template. </p> <p></p>"},{"location":"resource-editing/#delete-a-resource","title":"Delete a Resource","text":"<p>You can use the Delete action in the cluster mode to delete the resource from the actual cluster. </p> <p></p>"},{"location":"resource-editing/#secret-resources","title":"Secret Resources","text":"<p>Kubernetes secret resources are shown in the Navigator. A Secret is an object storing sensitive pieces of data such as usernames, passwords, tokens, and keys.</p> <p>Highlight the secret resource in the Navigator and the source will be displayed in the Editor pane. There, you can hover over the encoded secret value to see the decoded value (for username in the example below):</p> <p></p>"},{"location":"resource-navigation/","title":"Navigating Resources","text":""},{"location":"resource-navigation/#resource-navigator","title":"Resource Navigator","text":"<p>The Navigator shows all resources found in the current project. Resources are grouped into sections/subsections based on their usage in Kubernetes. Selecting a resource automatically highlights both the file containing that resource and any other resourced linked to the selected one:</p> <p></p> <p>In this screenshot: </p> <ul> <li>The <code>argo-rollouts-metrics</code> service is selected.</li> <li>The associated <code>argo-rollouts-metrics-service.yaml</code> file is highlighted to the left in the File Explorer.</li> <li>The linked <code>argo-rollouts-metrics</code> Deployment (via the selector in the Service manifest) is highlighted. </li> <li>The Service manifest is shown in the Editor to the right (with highlighting of the link to the Deployment on line 16).</li> </ul>"},{"location":"resource-navigation/#resource-links","title":"Resource Links","text":"<p>Links between resources are indicated by link icons to the left and right each resource name:</p> <ul> <li>Links to the left indicate there are incoming links to the resource. For example, a ConfigMap might   have an incoming link from a Deployment.</li> <li>Links to the right indicate there are outgoing links from the resource. For example, a Service might have a   selector that selects a Deployment.</li> </ul> <p>Hovering over a link icon will show a popup with all links (either incoming or outgoing) allowing you to click on  a link to take you to that resource in the navigator.</p> <p>In the following image, the popup shows the outgoing link from the <code>argo-rollouts</code> Service to the <code>argo-rollouts</code> Deployment  (via the selector in the Service manifest).</p> <p></p> <p>If a link is \"unfulfilled\", i.e., not referring to any object currently in the navigator, it is marked with a warning  triangle, making it easy to identify broken resource links in your manifests:</p> <p></p> <p>In this screenshot the <code>rollouts-demo-root</code> RoleBinding contains a reference to an <code>rollouts-demo</code> Role, which doesn't exist in the current manifests. Clicking on broken links will open the corresponding reference in the editor so you  can easily fix it. </p>"},{"location":"resource-navigation/#resource-filtering","title":"Resource Filtering","text":"<p>Resource filters allow you to filter the resources based on various properties such as:</p> <ol> <li>Name</li> <li>Kind</li> <li>Namespace</li> <li>Labels</li> <li>Annotations</li> </ol> <p>Click on the filter button on the top of the navigator to launch the dialog for configuration.</p> <p></p> <p></p> <p>Users can also add or remove filters by highlighting and hovering over labels, annotations or other metadata properties in the code editor:</p> <p></p>"},{"location":"resource-navigation/#navigation-history","title":"Navigation History","text":"<p>You can easily navigate back and forth between the selected resources with the help of the Navigation button. The highlight arrow will indicate when navigation to previous or next resource is available.</p> <p></p>"},{"location":"resource-navigation/#expandcollapse-sections","title":"Expand/Collapse Sections","text":"<p>In the resource navigator, clicking on the section name will expand or collapse individual sections.</p> <p></p>"},{"location":"resource-navigation/#recent-projects","title":"Recent Projects","text":"<p>The Recent Projects option has been added to the system menu to make it easy to switch between your favorite resource-manifest folders. </p> <p>Action: File &gt; Recent Projects</p> <p></p>"},{"location":"resource-navigation/#supported-resource-links","title":"Supported Resource Links","text":"<p>Monokle Desktop currently finds and visualizes the following links between Kubernetes resources - please let us know if we missed something or got it wrong!</p> Resource Type Outgoing Link(s) identified Secret <code>metadata.annotations.kubernetes.io/service-account.name</code> =&gt; ServiceAccount <code>metadata.name</code> (optional) Service <code>content.spec.selector</code> =&gt;  Deployment `spec.template.metadata.labels`` PodSpec in Deployment / Pod / DaemonSet / Job / StatefulSet / ReplicaSet / CronJob / ReplicationController <code>..configMapRef.name</code> =&gt; ConfigMap <code>metadata.name</code>, <code>..configMapKeyRef.name</code> =&gt; ConfigMap <code>metadata.name</code>, <code>..volumes[*].configMap.name</code> =&gt; ConfigMap <code>metadata.name</code>, <code>..volumes[*].secret.secretMame</code> =&gt; Secret <code>metadata.name</code>, <code>..secretKeyRef.name</code> =&gt; Secret <code>metadata.name</code>, <code>..imagePullSecrets</code> =&gt; Secret <code>metadata.name</code>, <code>..serviceAccountName</code> =&gt; ServiceAccount <code>metadata.name</code> ServiceAccount <code>..secrets</code> =&gt; Secret <code>metadata.name</code> PersistentVolume <code>spec.claimRef.name</code> =&gt; PersistentVolumeClaim <code>metadata.name</code> PersistentVolumeClaim <code>spec.volumeName</code> =&gt; PersistentVolume <code>metadata.name</code> Endpoints <code>metadata.name</code>  =&gt; Service <code>metadata.name</code> ClusterRoleBinding <code>roleRef.name</code> =&gt; ClusterRole <code>metadata.name</code> RoleBinding <code>roleRef.name</code> =&gt; ClusterRoleBinding or Role <code>metadata.name</code> Ingress <code>..backend.service.name</code> =&gt; Service <code>metadata.name</code>, <code>..resource.*</code> =&gt; any object in same namespace"},{"location":"resource-validation/","title":"Validating Resources","text":"<p>Monokle Desktop automatically validates all resources of the corresponding Kubernetes 1.22.1 schemas. In the Navigator, a resource that is not validated is shown in red. A resource with a broken link is shown in yellow.</p> <p></p>"},{"location":"resource-validation/#inspecting-link-and-syntax-validation-errors","title":"Inspecting Link and Syntax Validation Errors","text":"<p>You will see the number of both link and syntax validation errors in resources at the top of the Navigator:</p> <p></p> <p>Clicking on any item in the broken link or syntax error list will locate the file where the error exits in the Navigator and open the source in the Editor.</p> <p>Hover on the error icon to check the error details and see the corresponding line in the Editor:</p> <p></p>"},{"location":"resource-validation/#inspecting-policy-errors","title":"Inspecting Policy Errors","text":"<p>Monokle Desktop integrates with the Open Policy Agent and can use Rego policies to validate your resources. This means that validation now goes beyond syntax validation and also ensures that semantics are correct. For example, you can enable a policy that ensures that images no longer use the <code>latest</code> tag.</p> <p>Let's have a look at how you would configure and remediate violations.</p> <p>When you look at the left sidebar, you will notice that a new icon is available for resource validation. Clicking on the icon will open a drawer:</p> <p></p> <p>This is the new home for all modules related to validation. Continue by clicking on the Open Policy Agent integration and you will see a set of rules:</p> <p></p> <p>Here you can familiarize yourself with the available rules. We recommend enabling all of them and afterwards disabling those that generate too much noise for your use cases.</p> <p>Great! Policy validation is now enabled. Policy errors have the same behavior as syntax errors. This means that you will see a red error icon appear whenever a violation is detected.</p> <p></p> <p>After opening the resource in your editor, you will notice that the error is also marked in the gutter and highlighted. Hovering over the error will show you help on how to remediate the violation. Use this information to directly edit your resource and the errors will disappear in real-time.</p> <p></p>"},{"location":"resource-validation/#policy-rules","title":"Policy Rules","text":"<p>A big shout out to the DefSec team at Aqua Security as full credit for these rules goes to them. You can find the source of the Rego policies here.</p> <p>An overview of available rules:</p> Rule Description Severity KSV001 Process can elevate its own privileges medium KSV002 Default AppArmor profile not set medium KSV003 Default capabilities not dropped low KSV005 SYS_ADMIN capability added high KSV006 hostPath volume mounted with docker.sock high KSV008 Access to host IPC namespace high KSV009 Access to host network high KSV010 Access to host PID high KSV011 CPU not limited low KSV012 Runs as root user medium KSV013 Image tag ':latest' used low KSV014 Root file system is not read-only low KSV015 CPU requests not specified low KSV016 Memory requests not specified low KSV017 Privileged container high KSV018 Memory not limited low KSV020 Runs with low user ID low KSV021 Runs with low group ID medium KSV023 hostPath volumes mounted medium KSV024 Access to host ports high KSV025 SELinux custom options set medium KSV027 Non-default /proc masks set medium KSV028 Non-ephemeral volume types used low KSV029 A root primary or supplementary GID set low KSV030 Default Seccomp profile not set low"},{"location":"resource-validation/#policy-validation-faq","title":"Policy Validation FAQ","text":"<p>How does it work?</p> <p>Under the hood, Rego policies are compiled to web assembly. Monokle Desktop uses the opa-wasm NPM module to load the policy and evaluate your resources in real-time.</p> <p>Can I use this with Helm and Kustomize?</p> <p>No, in this first release only vanilla Kubernetes resources are validated. Let us know if this is something you need by liking our related Helm and Kustomize GitHub issues.</p> <p>Can I use my own Rego policies?</p> <p>No, currently only a set of preconfigured rules is available. We are considering policy plugins or an OPA Gatekeeper integration, feel free to let us know if this is something you'd like!</p>"},{"location":"source-editor/","title":"Using the Source Editor","text":""},{"location":"source-editor/#source-editor","title":"Source Editor","text":"<p>The right-most panel of the Monokle application is the Source Editor:</p> <p></p> <p>Selecting either a file or resource in the Navigator will show its contents in the Source Editor. The editor will syntax-highlight for YAML and provide context-sensitive help and auto-complete functionality for standard Kubernetes objects.</p> <p>Right-clicking in the editor shows a list of available commands. Pressing F1 opens its command-palette:</p> <p></p>"},{"location":"telemetry/","title":"Telemetry","text":"<p>To improve the end-user experience, Monokle Desktop collects telemetry data.</p> <p>Participation in this program is optional, and you may opt-out if you'd prefer not to share any information.</p> <p>The data collected is always anonymous, not traceable to the source, and only used in aggregate form. You can learn more about how we treat your data by reading our privacy statement. </p>"},{"location":"telemetry/#what-we-collect","title":"What We Collect","text":"<p>Statistics tracked include:</p> <ul> <li>The number of downloads.</li> <li>Error reports - Information about unexpected, often problematic issues, which allows us to fix them.</li> <li>Usage Data - How features are used in Monokle Desktop, which helps us to define next steps and prioritise features.</li> </ul>"},{"location":"telemetry/#how-to-opt-out","title":"How to Opt Out","text":"<p>To opt out of the Monokle Desktop analytics collection:</p> <ol> <li>Click on the blue gear icon at the top right of the Monokle Desktop screen: <code>Open Settings</code>.</li> <li>Click on <code>Global Setttings</code>.</li> <li>Go to <code>Telemetry</code> section and uncheck the boxes of the type of event(s) you'd like to opt-out.</li> </ol> <p>To check the current collection status: 1. Click on the blue gear icon: <code>Open Settings</code>. 2. Click on <code>Global Setttings</code>. 3. Go to <code>Telemetry</code> section and verify the state of the checkboxes.</p>"},{"location":"templates/","title":"What is a Monokle Desktop Template?","text":"<p>A Monokle Desktop Template is a mechanism for creating visual forms and interpolating the data from those forms into one or multiple manifests.</p> <p>For each form, we must define the JSON schema of the data to use as an input and a UI-schema for customizing the visuals of the forms (for example, specifying which widgets should be used).</p> <p>Monokle Desktop uses the React-Schema-Form component to render template forms for the provided schemas, read more in their documentation on how to further work with forms, schemas and ui-schemas.</p> <p>Any folder that contains a <code>monokle-template.json</code> file can be a template.</p>"},{"location":"templates/#what-is-the-structure-of-monokle-templatejson-for-a-valid-monokle-desktop-template","title":"What is the structure of <code>monokle-template.json</code> for a valid Monokle Desktop Template?","text":"<p>Here\u2019s an example of a template that creates a Pod: https://github.com/kubeshop/monokle-default-templates-plugin/blob/main/basic-pod-template/monokle-template.json</p> <pre><code>{\n\"name\": \"Basic Kubernetes Pod\",\n\"id\": \"io.kubeshop.monokle.templates.default.basic-pod-template\",\n\"author\": \"kubeshop.io\",\n\"version\": \"1.0.0\",\n\"description\": \"Creates a Pod for a specified Image\",\n\"repository\": \"\",\n\"type\": \"vanilla\",\n\"forms\": [\n{\n\"name\": \"Pod Settings\",\n\"description\": \"Specify the Image to use\",\n\"schema\": \"form-schema.json\",\n\"uiSchema\": \"form-ui-schema.json\"\n}\n],\n\"manifests\": [\n{\n\"filePath\": \"template.yaml\"\n}\n],\n\"resultMessage\": \"Pod resource created successfully!\",\n\"helpUrl\": \"https://github.com/kubeshop/monokle-default-templates-plugin\"\n}\n</code></pre> <p>The <code>name</code>, <code>id</code>, <code>author</code>, <code>version</code>, <code>description</code>, <code>type</code> and <code>forms</code> properties are required. All types of templates have these properties.</p> <p>In the above example, the type of the template is <code>\"vanilla\"</code>.</p>"},{"location":"templates/#what-does-a-form-schema-look-like","title":"What does a form schema look like?","text":"<p>The format of form schemas is JSON schema. This defines which data that will be sent to the template manifests.</p> <pre><code>{\n\"type\": \"object\",\n\"required\": [\"name\", \"image\"],\n\"properties\": {\n\"name\": {\n\"type\": \"string\",\n\"default\": \"my-pod\"\n},\n\"namespace\": {\n\"type\": \"string\"\n},\n\"image\": {\n\"type\": \"string\"\n}\n}\n}\n</code></pre>"},{"location":"templates/#what-does-a-form-ui-schema-look-like","title":"What does a form UI schema look like?","text":"<p>Example:</p> <pre><code>{\n\"name\": {\n\"ui:title\": \"Name\",\n\"ui:help\": \"The name of the Pod\"\n},\n\"namespace\": {\n\"ui:title\": \"Namespace\",\n\"ui:help\": \"The target namespace for the Pod\",\n\"ui:widget\": \"namespaceSelection\"\n},\n\"image\": {\n\"ui:title\": \"Image\",\n\"ui:help\": \"The image name to use for the Pod, for example nginx-ingress:latest\"\n}\n}\n</code></pre> <p>The role of this form is to specify information about how to render the form - read more about ui-schemas in the UI-Schema Documentation</p>"},{"location":"templates/#custom-form-widgets","title":"Custom Form Widgets","text":"<p>Monokle Desktop provides a number of custom form widgets to provide a better user experience:</p> <ul> <li><code>namespaceSelection</code>: Shows a dropdown with all namespaces in the current set of resources.</li> <li><code>imageSelection</code>: Shows a dropdown with all the images found in the current set of resources.</li> <li><code>apiGroupSelection</code>: Shows a dropdown with all apiGroups known by Monokle Desktop.</li> <li><code>podSelectSelection</code>: Shows a dropdown with all labels assigned to any pods or pod-specs in the current set of resources.</li> <li><code>resourceSelection</code>: Shows a dropdown with resource names from the current set of resources. This can be narrowed down by   adding a ui:options.resourceKinds property containing a |-separated string of desired resourceKinds.</li> </ul> <p>For example:</p> <pre><code>{\n\"targetClusterRole\": {\n\"ui:title\": \"Target ClusterRole\",\n\"ui:help\": \"The ClusterRole to bind to the created ServiceAccount\",\n\"ui:widget\": \"resourceSelection\",\n\"ui:options\": {\n\"resourceKinds\": \"ClusterRole\"\n}\n}\n}\n</code></pre> <p>All these widgets allow entry of custom values - i.e. none require you to select a known value.</p>"},{"location":"templates/#property-interpolation","title":"Property Interpolation","text":"<p>Monokle Desktop uses <code>[[</code> and <code>]]</code> as escape delimiters for script interpolation.</p> <p>For the JSON Schema example above example, if this form is the first one in the <code>forms</code> array from <code>monokle-template.json</code>, then we will be able to use the values in the template manifests:</p> <pre><code>propertyOne: [[forms[0].name]]\npropertyTwo: [[forms[0].namespace]]\notherProperty: [[forms[0].image]]\n</code></pre> <p>Scripts are run in a sandboxed environment giving you access to built-in Javascript objects. For example the following is taken from the basic-role-template which will create a YAML array of selected verbs in the corresponding form.</p> <pre><code>    verbs:\n- [[ forms[0].verbs.join(\"\\n      - \") ]]\n</code></pre>"},{"location":"templates/#what-types-of-templates-exist","title":"What types of templates exist?","text":"<p>Monokle Desktop has vanilla templates and referenced Helm Chart templates.</p>"},{"location":"templates/#vanilla-templates","title":"Vanilla Templates","text":"<p>The <code>type</code> property from <code>monokle-template.json</code> is \"vanilla\".</p> <p>In vanilla templates, we must provide the manifests that will be generated as an output. For example, here is a simple template manifest example:</p> <p><code>deployment.yaml</code></p> <pre><code>apiVersion: apps/v1\nmetadata:\nkind: Deployment\nname: [[forms[0].name]]\n</code></pre> <p>The <code>[[forms[0].name]]</code> parameter will be interpolated based on the input received from the form. In this specific example, the value of the <code>name</code> property from the first form will be inserted.</p> <p>Using the <code>manifests</code> property from the monokle-template file, specify the above template manifest like this:</p> <pre><code>{\n\"manifests\": [\n{\n\"filePath\": \"deployment.yaml\"\n}\n]\n}\n</code></pre>"},{"location":"templates/#referenced-helm-chart-templates","title":"Referenced Helm Chart Templates","text":"<p>The value of the <code>type</code> property from <code>monokle-template.json</code> is <code>\"helm-chart\"</code>.</p> <p>Example of <code>monokle-template.json</code>:</p> <pre><code>{\n\"name\": \"Minecraft Server (Test Plugin)\",\n\"id\": \"com.github.devcatalin.monokle-test-plugin.minecraft\",\n\"author\": \"Catalin\",\n\"version\": \"1.0.1\",\n\"description\": \"Create your own Minecraft server\",\n\"type\": \"helm-chart\",\n\"forms\": [\n{\n\"name\": \"Minecraft Server\",\n\"description\": \"Default settings for your Minecraft Server\",\n\"schema\": \"form-schema.json\",\n\"uiSchema\": \"form-ui-schema.json\"\n}\n],\n\"valuesFilePath\": \"values.yaml\",\n\"chartName\": \"minecraft\",\n\"chartVersion\": \"3.6.1\",\n\"chartRepo\": \"https://itzg.github.io/minecraft-server-charts/\",\n\"helpUrl\": \"https://artifacthub.io/packages/helm/minecraft-server-charts/minecraft\"\n}\n</code></pre> <p>In this example, we can see the first part of the file looks similar to the vanilla templates. However, for Helm chart templates we do not specify a <code>manifests</code> array, we specify information about the chart.</p> <p>The properties <code>chartName</code>, <code>chartVersion</code>, <code>chartRepo</code> are required to identify the helm chart.</p> <p>This type of template must bundle a <code>values.yaml</code> file that can contain properties that will be interpolated with values from the forms.</p> <p>For example, we could have the following <code>values.yaml</code> in the template folder:</p> <p><code>values.yaml</code></p> <pre><code>version: [[forms[0].version]]\nmaxPlayers: [[forms[0].maxPlayers]]\n</code></pre> <p>In the <code>monokle-template.json</code> example from above, we notice a <code>valuesFilePath</code> that specifies the path to the values file. This file will be interpolated with values from the forms and used by Helm to generate the output resources.</p>"},{"location":"templates/#how-do-i-install-a-template","title":"How do I install a Template?","text":"<p>Templates can be installed via Plugins. Read the How to install a Plugin section from Plugins Overview. Note: A plugin can contain one or multiple templates.</p>"},{"location":"templates/#default-monokle-desktop-templates","title":"Default Monokle Desktop Templates","text":"<p>Monokle Desktop includes a default set of templates which are installed automatically when starting Monokle Desktop for the first time and available in the Templates Explorer when working with your Monokle Desktop projects.</p> <p>Click on the View Templates icon to view the included templates:</p> <p></p> <p></p> <p>Check out the Monokle Desktop Default Templates Plugin repository to see which templates are included and their corresponding schemas and manifests.</p>"},{"location":"testing/","title":"Testing","text":"<p>Monokle Desktop tests are written with Playwright.</p>"},{"location":"testing/#run-tests","title":"Run Tests","text":"<p>First create a build to run the tests</p> <p><code>npm run electron:build</code></p> <p>To run specific tests</p> <p><code>npm run ui-test -- tests/&lt;filename&gt;.test.ts</code></p> <p>To run all the tests</p> <p><code>npm run ui-test</code></p>"},{"location":"testing/#write-extend-tests","title":"Write &amp; Extend Tests","text":"<p>To start writing tests first create a build(tests are run against the build which will be published), any changes made to the source code, adding identifiers, changing logic will need a new build for those changes to be in the tests</p> <p><code>npm run electron:build</code></p> <p>The <code>startApp()</code> function should be called and that will start a new Monokle Desktop instance with the <code>automation</code> flag set. More examples of tests can be found in the <code>./tests</code> folder The <code>automation</code> flag is used to change some handlers which cannot be automated by playwright since they are open by the specific OS's</p> <p>Models should contain most of the logic, we can think of models a mirror for some components in the app with some logic and identifiers for certain elements. Having most of the logic in the models can help with reusing most of the logic we have around tests and more lightweight tests.</p>"},{"location":"testing/#overriding-os-actions","title":"Overriding OS Actions","text":"<p>To change handlers such as <code>dialog.showOpenDialogSync</code> the function <code>getChannelName('channel-name')</code> should be called when creating a new handler on <code>ipcRenderer</code>, this will create different handler just for automation. To add a new handler in automation something like this is required: <pre><code>const name = 'some-value';\nconst chanel = getChannelName('channel-name', true);\nawait electronApp.evaluate(({ ipcMain }, params) =&gt; {\n  ipcMain.handle(params.chanel, () =&gt; {\n    return [params.name];\n  });\n}, { chanel, name });\n</code></pre></p> <p>Examples:</p> <ul> <li>override in electron</li> <li>override in tests</li> </ul>"},{"location":"working-with-multiple-resources/","title":"Working with Multiple Resources","text":""},{"location":"working-with-multiple-resources/#working-with-multiple-resources","title":"Working with Multiple Resources","text":"<p>In the Navigator, hover over a local resource to display a check box to select one or more resources:</p> <p></p> <p>Selecting one or more resources brings up the Action Links at the top of the Navigator where the Delete and Deploy options are available:</p> <p></p> <p>This same functionality is available for cluster resources where the Delete and Save to file/folder are the options:</p> <p></p>"},{"location":"tutorials/how-to-browse-clusters/","title":"How to Browse Clusters","text":"<p>In this Monokle tutorial, we will illustrate the steps to connect to a cluster and navigate/update contained resources.</p> <p>Let\u2019s get started! </p>"},{"location":"tutorials/how-to-browse-clusters/#1-configure-a-cluster","title":"1. Configure a Cluster","text":"<p>Launch Monokle and ensure that the setting Show Cluster Selector box is checked.</p> <p></p> <p>If this is the first time to configure a cluster in Monokle, you will see No Cluster Configured and the Configure button at the top of the screen:</p> <p></p> <p>Clicking the Configure button opens the widget to specify the cluster to load by inserting its location:</p> <p></p> <p>After clusters are configured, select the cluster you wish to work with from the drop down list at the top of the screen and click Load.</p> <p></p> <p>Monokle will switch to the Cluster Mode, and the Navigator will reflect all the resources retrieved from the configured cluster. </p>"},{"location":"tutorials/how-to-browse-clusters/#2-navigateselect-resources","title":"2. Navigate/Select Resources","text":"<p>Select a resource to view its source code in the Editor. Editing resources in cluster mode allows quick changes to be made and deployed back to the cluster.</p> <p></p>"},{"location":"tutorials/how-to-browse-clusters/#3-diff-changes-against-cluster","title":"3. Diff Changes Against Cluster","text":"<p>Click the Diff button to analyze and compare the selected resource against the currently configured cluster.</p> <p></p> <p>The comparison table will look like this:</p> <p></p>"},{"location":"tutorials/how-to-browse-clusters/#4-deploy-changes","title":"4. Deploy Changes","text":"<p>Click on the Deploy button to update the resource to the currently configured cluster.</p> <p></p> <p>Then select the namespace for deployment. Select an existing namespace from the cluster, create a new namespace, or don't specify a namespace at all.</p> <p>By selecting None, Deploy will use the namespaces declared in the resources. </p> <p></p> <p>The resource deployed dialog will be shown in the top-right corner of the console.</p> <p></p>"},{"location":"tutorials/how-to-browse-clusters/#5-exit-cluster-mode","title":"5. Exit Cluster Mode","text":"<p>Click on the Exit button on the top-right corner of the console to restore the resources of the currently selected folder. </p> <p></p>"},{"location":"tutorials/how-to-browse-clusters/#questions-or-comments","title":"Questions or Comments?","text":"<p>Please feel free to join our open source community on Discord with this Invite Link and start your discussion.</p>"},{"location":"tutorials/how-to-configure-monokle/","title":"How to Configure Monokle","text":"<p>In this tutorial, we will show the steps to configure the Monokle Environment. </p> <p>Note: All settings are initialised with default values - there is no immediate need to change them. </p> <p>Let\u2019s get started! </p>"},{"location":"tutorials/how-to-configure-monokle/#1-open-settings","title":"1. Open Settings","text":"<p>Launch Monokle and click on the Settings button to access the Settings widget:</p> <p></p>"},{"location":"tutorials/how-to-configure-monokle/#2-set-kubeconfig","title":"2. Set kubeconfig","text":"<p>Enter the kubeconfig file path in the KUBECONFIG text field. The kubeconfig parameter is used when viewing cluster resources and deploying/diffing local resources to a cluster.</p> <p></p> <p>Alternatively, you can click on the Browse button to fetch the kubeconfig file for configuring cluster access. </p> <p></p> <p>Select the required folder to configure the cluster. </p> <p></p> <p>Note: The kubectl command-line tool uses kubeconfig files to find the information for choosing a cluster and communicating with the API server.</p>"},{"location":"tutorials/how-to-configure-monokle/#3-files-include","title":"3. Files: Include","text":"<p>Monokle will look for Kubernetes manifests in files matching this filter, by default this is set to .yaml/.yml files. Click on the Add Pattern button to include the files having the corresponding extension.</p> <p></p> <p>Enter the extension pattern in the Files Include textbox and click OK. </p> <p></p>"},{"location":"tutorials/how-to-configure-monokle/#4-files-exclude","title":"4. Files: Exclude","text":"<p>Monokle will ignore files/folders matching any of the specified paths, even if they match an above inclusion pattern. Click on the Add Pattern button to exclude the files having the corresponding extension. For example, node_modules.</p> <p></p> <p>Enter the extension pattern in the Files Exclude textbox and hit the OK button. </p> <p></p>"},{"location":"tutorials/how-to-configure-monokle/#5-helm-preview-mode","title":"5. Helm Preview Mode","text":"<p>Click on the Helm Preview Mode dropdown to select any of the viewing states. The options for preview:</p> <ul> <li>Template - To use the Helm Template command</li> <li>Install - To use the Helm Install command</li> </ul> <p></p>"},{"location":"tutorials/how-to-configure-monokle/#6-on-startup","title":"6. On Startup","text":"<p>Tick the Automatically Load Last Folder checkbox to reload the last reviewed folder when launching Monokle. </p> <p></p>"},{"location":"tutorials/how-to-configure-monokle/#questions-or-comments","title":"Questions or Comments?","text":"<p>Please feel free to join our open source community on Discord with this Invite Link and start your discussion.</p>"},{"location":"tutorials/how-to-create-and-edit-configmap/","title":"How to Work with the Form Editor","text":"<p>In this Monokle tutorial, we will illustrate how to create and edit Form resources to store non-confidential  data in key-value pairs.       </p> <p>Let\u2019s get started! </p>"},{"location":"tutorials/how-to-create-and-edit-configmap/#launch-monokle","title":"Launch Monokle","text":"<p>Note: Please follow this Getting Started guide to install Monokle \ud83d\ude80</p> <p>Launch Monokle and, on the welcome screen, there are three options to start working with projects:</p> <ul> <li>Select an exisiting folder.</li> <li>Create an empty project.</li> <li>Start from a template.</li> </ul> <p>Click Select an existing project to add your project folder containing K8 resources. </p> <p></p>"},{"location":"tutorials/how-to-create-and-edit-configmap/#select-folder","title":"Select Folder","text":"<p>Select your folder to parse its manifest in the file explorer. </p> <p></p> <p>In the file explorer, you can view manifests, including their resources and their relationships.</p>"},{"location":"tutorials/how-to-create-and-edit-configmap/#select-manifests","title":"Select Manifests","text":"<p>Scroll up and down to navigate and select the required manifests. </p> <p></p> <p>Once you select a manifest, its related resources will be highlighted automatically in the navigator.</p>"},{"location":"tutorials/how-to-create-and-edit-configmap/#create-a-new-resource","title":"Create a New Resource","text":"<p>Click on the Add button (plus sign) in the Navigator to launch the Create Resource dialog for creating resources. </p> <p></p> <p>At the bottom of the dialog, you can select the option to: - Save to folder. - Add to file. - Don't save.</p> <p></p>"},{"location":"tutorials/how-to-create-and-edit-configmap/#use-the-source-editor","title":"Use the Source Editor","text":"<p>Step 1: Navigate and select the resource in the Navigator.  </p> <p>Once you select a resource, its source code will be launched automatically in the Source Editor. </p> <p></p> <p>The Source Editor allows you to view and edit the source code easily. </p> <p>Step 2: Right click anywhere in the Source Editor to launch the menu to select the required editing option from the drop-down list.</p> <p></p> <p>You can also edit the source code using the Form Editor, which does not require any coding effort.</p>"},{"location":"tutorials/how-to-create-and-edit-configmap/#using-the-form-editor","title":"Using the Form Editor","text":"<p>The Form Editor collects the required information and passes it to another entity. To launch the ConfigMap Editor, click on the Form button. </p> <p></p>"},{"location":"tutorials/how-to-create-and-edit-configmap/#for-configuration-data","title":"For Configuration Data","text":"<p>Step 1: Click on the Add Item button to create a new text field for data configuration.</p> <p></p> <p>Step 2: Enter the text configuration data in key-value pair fields.</p> <p>Note: You can also edit the existing data in the key-value pair fields.</p> <p></p>"},{"location":"tutorials/how-to-create-and-edit-configmap/#for-binary-configuration-data","title":"For Binary Configuration Data","text":"<p>Step 1: Click on the Add Item button to create a new binary data field for binary data configuration.</p> <p></p> <p>Step 2: Enter the binary configuration data in key-value pair fields.</p> <p>Note: You can also edit the existing binary configuration data in the fields. </p> <p></p> <p>Step 3: Tick the Immutable checkbox to ensure the data stored in the ConfigMap is not updated. </p> <p></p>"},{"location":"tutorials/how-to-create-and-edit-configmap/#using-the-object-metadata-editor","title":"Using the Object Metadata Editor","text":"<p>To launch the Metadata Editor, click on the Metadata button.</p> <p></p> <p>For editing object metadata, you need to provide a specific name, namespace, annotations, labels, cluster name, generate name, and finalizers to uniquely identify the object.  </p>"},{"location":"tutorials/how-to-create-and-edit-configmap/#name","title":"Name","text":"<p>Step 1: Enter the specific key name in the name field to give a unique identity to the object.</p> <p></p> <p>Note: The name of the ConfigMap must be unique within a namespace.</p>"},{"location":"tutorials/how-to-create-and-edit-configmap/#namespace","title":"Namespace","text":"<p>Step 1: Enter namespace in the namespace field to organize clusters into virtual sub-clusters. </p> <p></p> <p>Note: Provide a unique namespace within the ConfigMap. If left empty, the default namespace value shall be assigned automatically. </p>"},{"location":"tutorials/how-to-create-and-edit-configmap/#annotations","title":"Annotations","text":"<p>Step 1: Click on the Add Item button to create the new key-value field for annotations. </p> <p></p> <p>Step 2: Enter the arbitrary metadata in key-value pair fields.</p> <p>Note: You can also edit the existing arbitrary metadata data in the fields. </p> <p></p>"},{"location":"tutorials/how-to-create-and-edit-configmap/#labels","title":"Labels","text":"<p>Step 1: Click on the Add Item button to create the new key-value field for labels.</p> <p></p> <p>Step 2: Enter the label's details in the key-value pair field.</p> <p>Note:  You also can edit existing label data in the fields. </p> <p></p>"},{"location":"tutorials/how-to-create-and-edit-configmap/#cluster-name","title":"Cluster Name","text":"<p>Enter the name of the cluster in the Cluster Name field to which the object belongs.</p> <p></p>"},{"location":"tutorials/how-to-create-and-edit-configmap/#generate-name","title":"Generate Name","text":"<p>Enter a prefix in the Generate Name field.</p> <p>Note: You can also edit the existing data in the Generate Name field. </p> <p></p>"},{"location":"tutorials/how-to-create-and-edit-configmap/#finalizers","title":"Finalizers","text":"<p>Step 1: Click on the Add Item button to create the new finalizer field.</p> <p></p> <p>Step 2: Enter the finalizer in the finalizers field. </p> <p>Note: You also can edit the existing data in the finalizer fields. </p> <p></p> <p>Kubernetes is prompted to wait until specific conditions are met before it fully deletes resources marked for deletion.</p> <p>Note: Finalizer must be empty before the object is deleted from the registry. </p> <p>The source editor provides autocomplete and autosave options to automatically save your edits. </p>"},{"location":"tutorials/how-to-create-and-edit-configmap/#questions-or-comments","title":"Questions or Comments?","text":"<p>Please feel free to join our open source community on Discord with this Invite Link and start your discussion. </p>"},{"location":"tutorials/how-to-fix-broken-links/","title":"How to Fix Broken Links","text":"<p>In this Monokle tutorial, we will illustrate the steps to fix broken links. </p> <p>Let\u2019s get started!</p>"},{"location":"tutorials/how-to-fix-broken-links/#1-launch-monokle","title":"1. Launch Monokle","text":"<p>Note: Please follow this Getting Started guide to install Monokle \ud83d\ude80</p> <p>Launch Monokle and, on the welcome screen, there are three options to start working with projects:</p> <ul> <li>Select an exisiting folder.</li> <li>Create an empty project.</li> <li>Start from a template.</li> </ul> <p>Click Select an existing project to add your project folder containing K8 resources. </p> <p></p>"},{"location":"tutorials/how-to-fix-broken-links/#2-select-folder","title":"2. Select Folder","text":"<p>Select your folder to parse its manifest in the file explorer. </p> <p></p> <p>In the file explorer, you can view manifests, including their resources, and their relationships.</p>"},{"location":"tutorials/how-to-fix-broken-links/#3-navigate-resource-manifests","title":"3. Navigate Resource Manifests","text":"<p>Scroll up &amp; down to navigate and select the required manifests. </p> <p></p> <p>Once you select a manifest, its related resources will be highlighted automatically in the navigator. </p> <p></p>"},{"location":"tutorials/how-to-fix-broken-links/#4-find-broken-links","title":"4. Find Broken Links","text":"<p>Scroll down in the navigator and hover over a resource link with a warning signal.</p> <p>Note: The link with a warning signal indicates that the link is broken. </p> <p></p>"},{"location":"tutorials/how-to-fix-broken-links/#5-click-on-the-broken-link","title":"5. Click on the Broken Link","text":"<p>Click on the link provided in the tooltip.</p> <p>Note:  The source code for the specific resource will be highlighted automatically in the editor. </p> <p></p>"},{"location":"tutorials/how-to-fix-broken-links/#6-update-the-link-in-the-source-editor","title":"6. Update the link in the source editor","text":"<p>Manually update the name of the highlighted dead endpoint with a working endpoint to fix the broken link. </p> <p></p> <p>Note: The warning triangle will automatically go away once a valid link is provided.</p>"},{"location":"tutorials/how-to-fix-broken-links/#questions-or-comments","title":"Questions or Comments?","text":"<p>Please feel free to join our open source community on Discord with this Invite Link and start your discussion. </p>"},{"location":"tutorials/how-to-navigate-and-edit-manifests/","title":"How to Work with Manifests","text":"<p>In this Monokle tutorial, we will illustrate the steps to help you navigate K8s resources and edit their manifests. </p> <p>Let\u2019s get started! </p>"},{"location":"tutorials/how-to-navigate-and-edit-manifests/#1-launch-monokle","title":"1. Launch Monokle","text":"<p>Note: Please follow this Getting Started guide to install Monokle \ud83d\ude80</p> <p>Launch Monokle and, on the welcome screen, there are three option to start working with projects:</p> <ul> <li>Select an exisiting folder.</li> <li>Create an empty project.</li> <li>Start from a template.</li> </ul> <p>Click Select an existing project to add your project folder containing K8 resources. </p> <p></p>"},{"location":"tutorials/how-to-navigate-and-edit-manifests/#2-select-folder","title":"2. Select Folder","text":"<p>Select your folder to parse its manifest in the file explorer. </p> <p></p> <p>In the file explorer, you can view manifests, including their resources, and their relationships.</p>"},{"location":"tutorials/how-to-navigate-and-edit-manifests/#3-navigate-resource-manifests","title":"3. Navigate Resource Manifests","text":"<p>Scroll up &amp; down to navigate and select the required manifests. </p> <p></p> <p>Once you select a manifest, its related resources will be highlighted automatically in the navigator. </p> <p>See Resource Navigation for more information on how to navigate resources.</p>"},{"location":"tutorials/how-to-navigate-and-edit-manifests/#4-navigate-resource-links","title":"4. Navigate resource links","text":"<p>Click on outgoing and incoming links to navigate the corresponding resources. </p> <p> </p> <p>The warning triangle reflects that the link refers to broken resource links - see Resource Links</p> <p></p>"},{"location":"tutorials/how-to-navigate-and-edit-manifests/#5-select-required-resource","title":"5. Select Required Resource","text":"<p>Select the required resource in the Navigator. </p> <p> </p> <p>Once you select a resource, its source code will be launched and highlighted in the editor. </p> <p>Now you can edit the resource in the editor and any changes you make will be automatically saved.</p> <p>See Resource Editing for more information on how to edit resources.</p>"},{"location":"tutorials/how-to-navigate-and-edit-manifests/#6-edit-a-resource","title":"6. Edit a Resource","text":"<p>Right-click on the editor to launch the editing menu.</p> <p></p> <p>The editing menu includes the following options:</p> <ul> <li>Go to Symbols: Select the Go to Symbol option to perform a focused search of code for finding specified symbols quickly.</li> <li>Change All occurrences: Select the Change All Occurrences option to replace all string occurrences in the code with any other regular expression.</li> <li>Format Document: Select the Format Document option to organize the source code for better readability.  It addresses font size, spacing, margins, alignment, columns, indentation, and lists.</li> <li>Cut: Select the Cut option to delete the unnecessary data. After you cut the text, it gets stored in the clipboard so you can use it later.</li> <li>Copy: Select the Copy option to copy a piece of code and reuse the code to save development time.</li> <li>Paste: Select the Paste option to paste a piece of code. This reduces the repetition of efforts required to write and test code.</li> <li>Command Palette: Select the Command Palette option to access keyboard shortcuts quickly for the most common operations.</li> </ul> <p>Note: The editor provides autocomplete and autosave options.</p>"},{"location":"tutorials/how-to-navigate-and-edit-manifests/#questions-or-comments","title":"Questions or Comments?","text":"<p>Please feel free to join our open source community on Discord with this Invite Link and start your discussion.</p>"}]}